{"ast":null,"code":"import getDirection from 'direction';\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\nimport React, { createContext, useContext, useRef, useEffect, useLayoutEffect, useState, memo, forwardRef, useCallback, Component, useReducer, useMemo } from 'react';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { Editor, Range, Transforms, Node, Text as Text$1, Path, Point, Element as Element$1, Scrubber } from 'slate';\nimport { DOMEditor, EDITOR_TO_USER_MARKS, EDITOR_TO_PENDING_DIFFS, EDITOR_TO_PENDING_ACTION, EDITOR_TO_PENDING_INSERTION_MARKS, targetRange, verifyDiffState, EDITOR_TO_PENDING_SELECTION, IS_COMPOSING, IS_NODE_MAP_DIRTY, applyStringDiff, isDOMSelection, isTrackedMutation, EDITOR_TO_FORCE_RENDER, normalizeRange, normalizePoint, EDITOR_TO_PLACEHOLDER_ELEMENT, normalizeStringDiff, mergeStringDiffs, CAN_USE_DOM, IS_ANDROID, EDITOR_TO_SCHEDULE_FLUSH, MARK_PLACEHOLDER_SYMBOL, IS_IOS, PLACEHOLDER_SYMBOL, IS_WEBKIT, isTextDecorationsEqual, EDITOR_TO_KEY_TO_ELEMENT, NODE_TO_ELEMENT, ELEMENT_TO_NODE, isElementDecorationsEqual, NODE_TO_INDEX, NODE_TO_PARENT, IS_READ_ONLY, getActiveElement, getSelection, IS_FOCUSED, getDefaultView, EDITOR_TO_WINDOW, EDITOR_TO_ELEMENT, IS_FIREFOX, EDITOR_TO_USER_SELECTION, HAS_BEFORE_INPUT_SUPPORT, isDOMElement, isDOMNode, TRIPLE_CLICK, IS_FIREFOX_LEGACY, IS_WECHATBROWSER, IS_UC_MOBILE, Hotkeys, IS_CHROME, isPlainTextOnlyPaste, EDITOR_TO_ON_CHANGE, withDOM } from 'slate-dom';\nexport { NODE_TO_INDEX, NODE_TO_PARENT } from 'slate-dom';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport ReactDOM from 'react-dom';\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * A React context for sharing the editor object.\n */\nvar EditorContext = /*#__PURE__*/createContext(null);\n/**\n * Get the current editor object from the React context.\n */\nvar useSlateStatic = () => {\n  var editor = useContext(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n// eslint-disable-next-line no-redeclare\nvar ReactEditor = DOMEditor;\nfunction ownKeys$5(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$5(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nvar RESOLVE_DELAY = 25;\n// Time with no user interaction before the current user action is considered as done.\nvar FLUSH_DELAY = 200;\n// Replace with `const debug = console.log` to debug\nvar debug = function debug() {};\n// Type guard to check if a value is a DataTransfer\nvar isDataTransfer = value => (value === null || value === void 0 ? void 0 : value.constructor.name) === 'DataTransfer';\nfunction createAndroidInputManager(_ref) {\n  var {\n    editor,\n    scheduleOnDOMSelectionChange,\n    onDOMSelectionChange\n  } = _ref;\n  var flushing = false;\n  var compositionEndTimeoutId = null;\n  var flushTimeoutId = null;\n  var actionTimeoutId = null;\n  var idCounter = 0;\n  var insertPositionHint = false;\n  var applyPendingSelection = () => {\n    var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(editor);\n    EDITOR_TO_PENDING_SELECTION.delete(editor);\n    if (pendingSelection) {\n      var {\n        selection\n      } = editor;\n      var normalized = normalizeRange(editor, pendingSelection);\n      if (normalized && (!selection || !Range.equals(normalized, selection))) {\n        Transforms.select(editor, normalized);\n      }\n    }\n  };\n  var performAction = () => {\n    var action = EDITOR_TO_PENDING_ACTION.get(editor);\n    EDITOR_TO_PENDING_ACTION.delete(editor);\n    if (!action) {\n      return;\n    }\n    if (action.at) {\n      var target = Point.isPoint(action.at) ? normalizePoint(editor, action.at) : normalizeRange(editor, action.at);\n      if (!target) {\n        return;\n      }\n      var _targetRange = Editor.range(editor, target);\n      if (!editor.selection || !Range.equals(editor.selection, _targetRange)) {\n        Transforms.select(editor, target);\n      }\n    }\n    action.run();\n  };\n  var flush = () => {\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (actionTimeoutId) {\n      clearTimeout(actionTimeoutId);\n      actionTimeoutId = null;\n    }\n    if (!hasPendingDiffs() && !hasPendingAction()) {\n      applyPendingSelection();\n      return;\n    }\n    if (!flushing) {\n      flushing = true;\n      setTimeout(() => flushing = false);\n    }\n    if (hasPendingAction()) {\n      flushing = 'action';\n    }\n    var selectionRef = editor.selection && Editor.rangeRef(editor, editor.selection, {\n      affinity: 'forward'\n    });\n    EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n    debug('flush', EDITOR_TO_PENDING_ACTION.get(editor), EDITOR_TO_PENDING_DIFFS.get(editor));\n    var scheduleSelectionChange = hasPendingDiffs();\n    var diff;\n    while (diff = (_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]) {\n      var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;\n      var pendingMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n      if (pendingMarks !== undefined) {\n        EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n        editor.marks = pendingMarks;\n      }\n      if (pendingMarks && insertPositionHint === false) {\n        insertPositionHint = null;\n      }\n      var range = targetRange(diff);\n      if (!editor.selection || !Range.equals(editor.selection, range)) {\n        Transforms.select(editor, range);\n      }\n      if (diff.diff.text) {\n        Editor.insertText(editor, diff.diff.text);\n      } else {\n        Editor.deleteFragment(editor);\n      }\n      // Remove diff only after we have applied it to account for it when transforming\n      // pending ranges.\n      EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter(_ref2 => {\n        var {\n          id\n        } = _ref2;\n        return id !== diff.id;\n      }));\n      if (!verifyDiffState(editor, diff)) {\n        scheduleSelectionChange = false;\n        EDITOR_TO_PENDING_ACTION.delete(editor);\n        EDITOR_TO_USER_MARKS.delete(editor);\n        flushing = 'action';\n        // Ensure we don't restore the pending user (dom) selection\n        // since the document and dom state do not match.\n        EDITOR_TO_PENDING_SELECTION.delete(editor);\n        scheduleOnDOMSelectionChange.cancel();\n        onDOMSelectionChange.cancel();\n        selectionRef === null || selectionRef === void 0 || selectionRef.unref();\n      }\n    }\n    var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n    if (selection && !EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !Range.equals(selection, editor.selection))) {\n      Transforms.select(editor, selection);\n    }\n    if (hasPendingAction()) {\n      performAction();\n      return;\n    }\n    // COMPAT: The selectionChange event is fired after the action is performed,\n    // so we have to manually schedule it to ensure we don't 'throw away' the selection\n    // while rendering if we have pending changes.\n    if (scheduleSelectionChange) {\n      scheduleOnDOMSelectionChange();\n    }\n    scheduleOnDOMSelectionChange.flush();\n    onDOMSelectionChange.flush();\n    applyPendingSelection();\n    var userMarks = EDITOR_TO_USER_MARKS.get(editor);\n    EDITOR_TO_USER_MARKS.delete(editor);\n    if (userMarks !== undefined) {\n      editor.marks = userMarks;\n      editor.onChange();\n    }\n  };\n  var handleCompositionEnd = _event => {\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n    }\n    compositionEndTimeoutId = setTimeout(() => {\n      IS_COMPOSING.set(editor, false);\n      flush();\n    }, RESOLVE_DELAY);\n  };\n  var handleCompositionStart = _event => {\n    IS_COMPOSING.set(editor, true);\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n      compositionEndTimeoutId = null;\n    }\n  };\n  var updatePlaceholderVisibility = function updatePlaceholderVisibility() {\n    var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var placeholderElement = EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);\n    if (!placeholderElement) {\n      return;\n    }\n    if (hasPendingDiffs() || forceHide) {\n      placeholderElement.style.display = 'none';\n      return;\n    }\n    placeholderElement.style.removeProperty('display');\n  };\n  var storeDiff = (path, diff) => {\n    var _EDITOR_TO_PENDING_DI3;\n    var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];\n    EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);\n    var target = Node.leaf(editor, path);\n    var idx = pendingDiffs.findIndex(change => Path.equals(change.path, path));\n    if (idx < 0) {\n      var normalized = normalizeStringDiff(target.text, diff);\n      if (normalized) {\n        pendingDiffs.push({\n          path,\n          diff,\n          id: idCounter++\n        });\n      }\n      updatePlaceholderVisibility();\n      return;\n    }\n    var merged = mergeStringDiffs(target.text, pendingDiffs[idx].diff, diff);\n    if (!merged) {\n      pendingDiffs.splice(idx, 1);\n      updatePlaceholderVisibility();\n      return;\n    }\n    pendingDiffs[idx] = _objectSpread$5(_objectSpread$5({}, pendingDiffs[idx]), {}, {\n      diff: merged\n    });\n  };\n  var scheduleAction = function scheduleAction(run) {\n    var {\n      at\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    insertPositionHint = false;\n    EDITOR_TO_PENDING_SELECTION.delete(editor);\n    scheduleOnDOMSelectionChange.cancel();\n    onDOMSelectionChange.cancel();\n    if (hasPendingAction()) {\n      flush();\n    }\n    EDITOR_TO_PENDING_ACTION.set(editor, {\n      at,\n      run\n    });\n    // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n    // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n    // in this case and thus never actually perform the action.\n    actionTimeoutId = setTimeout(flush);\n  };\n  var handleDOMBeforeInput = event => {\n    var _targetRange2;\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (IS_NODE_MAP_DIRTY.get(editor)) {\n      return;\n    }\n    var {\n      inputType: type\n    } = event;\n    var targetRange = null;\n    var data = event.dataTransfer || event.data || undefined;\n    if (insertPositionHint !== false && type !== 'insertText' && type !== 'insertCompositionText') {\n      insertPositionHint = false;\n    }\n    var [nativeTargetRange] = event.getTargetRanges();\n    if (nativeTargetRange) {\n      targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    // COMPAT: SelectionChange event is fired after the action is performed, so we\n    // have to manually get the selection here to ensure it's up-to-date.\n    var window = ReactEditor.getWindow(editor);\n    var domSelection = window.getSelection();\n    if (!targetRange && domSelection) {\n      nativeTargetRange = domSelection;\n      targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;\n    if (!targetRange) {\n      return;\n    }\n    // By default, the input manager tries to store text diffs so that we can\n    // defer flushing them at a later point in time. We don't want to flush\n    // for every input event as this can be expensive. However, there are some\n    // scenarios where we cannot safely store the text diff and must instead\n    // schedule an action to let Slate normalize the editor state.\n    var canStoreDiff = true;\n    if (type.startsWith('delete')) {\n      if (Range.isExpanded(targetRange)) {\n        var [_start, _end] = Range.edges(targetRange);\n        var _leaf = Node.leaf(editor, _start.path);\n        if (_leaf.text.length === _start.offset && _end.offset === 0) {\n          var next = Editor.next(editor, {\n            at: _start.path,\n            match: Text$1.isText\n          });\n          if (next && Path.equals(next[1], _end.path)) {\n            targetRange = {\n              anchor: _end,\n              focus: _end\n            };\n          }\n        }\n      }\n      var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n      var [start, end] = Range.edges(targetRange);\n      var [leaf, path] = Editor.leaf(editor, start.path);\n      var diff = {\n        text: '',\n        start: start.offset,\n        end: end.offset\n      };\n      var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor);\n      var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find(change => Path.equals(change.path, path));\n      var diffs = relevantPendingDiffs ? [relevantPendingDiffs.diff, diff] : [diff];\n      var text = applyStringDiff(leaf.text, ...diffs);\n      if (text.length === 0) {\n        // Text leaf will be removed, so we need to schedule an\n        // action to remove it so that Slate can normalize instead\n        // of storing as a diff\n        canStoreDiff = false;\n      }\n      if (Range.isExpanded(targetRange)) {\n        if (canStoreDiff && Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n          var point = {\n            path: targetRange.anchor.path,\n            offset: start.offset\n          };\n          var range = Editor.range(editor, point, point);\n          handleUserSelect(range);\n          return storeDiff(targetRange.anchor.path, {\n            text: '',\n            end: end.offset,\n            start: start.offset\n          });\n        }\n        return scheduleAction(() => Editor.deleteFragment(editor, {\n          direction\n        }), {\n          at: targetRange\n        });\n      }\n    }\n    switch (type) {\n      case 'deleteByComposition':\n      case 'deleteByCut':\n      case 'deleteByDrag':\n        {\n          return scheduleAction(() => Editor.deleteFragment(editor), {\n            at: targetRange\n          });\n        }\n      case 'deleteContent':\n      case 'deleteContentForward':\n        {\n          var {\n            anchor\n          } = targetRange;\n          if (canStoreDiff && Range.isCollapsed(targetRange)) {\n            var targetNode = Node.leaf(editor, anchor.path);\n            if (anchor.offset < targetNode.text.length) {\n              return storeDiff(anchor.path, {\n                text: '',\n                start: anchor.offset,\n                end: anchor.offset + 1\n              });\n            }\n          }\n          return scheduleAction(() => Editor.deleteForward(editor), {\n            at: targetRange\n          });\n        }\n      case 'deleteContentBackward':\n        {\n          var _nativeTargetRange;\n          var {\n            anchor: _anchor\n          } = targetRange;\n          // If we have a mismatch between the native and slate selection being collapsed\n          // we are most likely deleting a zero-width placeholder and thus should perform it\n          // as an action to ensure correct behavior (mostly happens with mark placeholders)\n          var nativeCollapsed = isDOMSelection(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);\n          if (canStoreDiff && nativeCollapsed && Range.isCollapsed(targetRange) && _anchor.offset > 0) {\n            return storeDiff(_anchor.path, {\n              text: '',\n              start: _anchor.offset - 1,\n              end: _anchor.offset\n            });\n          }\n          return scheduleAction(() => Editor.deleteBackward(editor), {\n            at: targetRange\n          });\n        }\n      case 'deleteEntireSoftLine':\n        {\n          return scheduleAction(() => {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineBackward':\n        {\n          return scheduleAction(() => Editor.deleteBackward(editor, {\n            unit: 'block'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineBackward':\n        {\n          return scheduleAction(() => Editor.deleteBackward(editor, {\n            unit: 'line'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineForward':\n        {\n          return scheduleAction(() => Editor.deleteForward(editor, {\n            unit: 'block'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineForward':\n        {\n          return scheduleAction(() => Editor.deleteForward(editor, {\n            unit: 'line'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteWordBackward':\n        {\n          return scheduleAction(() => Editor.deleteBackward(editor, {\n            unit: 'word'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteWordForward':\n        {\n          return scheduleAction(() => Editor.deleteForward(editor, {\n            unit: 'word'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'insertLineBreak':\n        {\n          return scheduleAction(() => Editor.insertSoftBreak(editor), {\n            at: targetRange\n          });\n        }\n      case 'insertParagraph':\n        {\n          return scheduleAction(() => Editor.insertBreak(editor), {\n            at: targetRange\n          });\n        }\n      case 'insertCompositionText':\n      case 'deleteCompositionText':\n      case 'insertFromComposition':\n      case 'insertFromDrop':\n      case 'insertFromPaste':\n      case 'insertFromYank':\n      case 'insertReplacementText':\n      case 'insertText':\n        {\n          if (isDataTransfer(data)) {\n            return scheduleAction(() => ReactEditor.insertData(editor, data), {\n              at: targetRange\n            });\n          }\n          var _text = data !== null && data !== void 0 ? data : '';\n          // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n          // the placeholder itself and thus includes the zero-width space inside edit events.\n          if (EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n            _text = _text.replace('\\uFEFF', '');\n          }\n          // Pastes from the Android clipboard will generate `insertText` events.\n          // If the copied text contains any newlines, Android will append an\n          // extra newline to the end of the copied text.\n          if (type === 'insertText' && /.*\\n.*\\n$/.test(_text)) {\n            _text = _text.slice(0, -1);\n          }\n          // If the text includes a newline, split it at newlines and paste each component\n          // string, with soft breaks in between each.\n          if (_text.includes('\\n')) {\n            return scheduleAction(() => {\n              var parts = _text.split('\\n');\n              parts.forEach((line, i) => {\n                if (line) {\n                  Editor.insertText(editor, line);\n                }\n                if (i !== parts.length - 1) {\n                  Editor.insertSoftBreak(editor);\n                }\n              });\n            }, {\n              at: targetRange\n            });\n          }\n          if (Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n            var [_start2, _end2] = Range.edges(targetRange);\n            var _diff = {\n              start: _start2.offset,\n              end: _end2.offset,\n              text: _text\n            };\n            // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n            // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n            // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n            // text events are fired with the correct target ranges, only the final 'insertComposition'\n            // isn't, so we can adjust the target range start offset if we are confident this is the\n            // swiftkey insert causing the issue.\n            if (_text && insertPositionHint && type === 'insertCompositionText') {\n              var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\\S|$/);\n              var diffPosition = _diff.start + _diff.text.search(/\\S|$/);\n              if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {\n                _diff.start -= 1;\n                insertPositionHint = null;\n                scheduleFlush();\n              } else {\n                insertPositionHint = false;\n              }\n            } else if (type === 'insertText') {\n              if (insertPositionHint === null) {\n                insertPositionHint = _diff;\n              } else if (insertPositionHint && Range.isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {\n                insertPositionHint = _objectSpread$5(_objectSpread$5({}, insertPositionHint), {}, {\n                  text: insertPositionHint.text + _text\n                });\n              } else {\n                insertPositionHint = false;\n              }\n            } else {\n              insertPositionHint = false;\n            }\n            if (canStoreDiff) {\n              storeDiff(_start2.path, _diff);\n              return;\n            }\n          }\n          return scheduleAction(() => Editor.insertText(editor, _text), {\n            at: targetRange\n          });\n        }\n    }\n  };\n  var hasPendingAction = () => {\n    return !!EDITOR_TO_PENDING_ACTION.get(editor);\n  };\n  var hasPendingDiffs = () => {\n    var _EDITOR_TO_PENDING_DI4;\n    return !!((_EDITOR_TO_PENDING_DI4 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);\n  };\n  var hasPendingChanges = () => {\n    return hasPendingAction() || hasPendingDiffs();\n  };\n  var isFlushing = () => {\n    return flushing;\n  };\n  var handleUserSelect = range => {\n    EDITOR_TO_PENDING_SELECTION.set(editor, range);\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    var {\n      selection\n    } = editor;\n    if (!range) {\n      return;\n    }\n    var pathChanged = !selection || !Path.equals(selection.anchor.path, range.anchor.path);\n    var parentPathChanged = !selection || !Path.equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));\n    if (pathChanged && insertPositionHint || parentPathChanged) {\n      insertPositionHint = false;\n    }\n    if (pathChanged || hasPendingDiffs()) {\n      flushTimeoutId = setTimeout(flush, FLUSH_DELAY);\n    }\n  };\n  var handleInput = () => {\n    if (hasPendingAction() || !hasPendingDiffs()) {\n      flush();\n    }\n  };\n  var handleKeyDown = _ => {\n    // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n    // directly next to a non-contenteditable element (= the placeholder).\n    // The only event fired soon enough for us to allow hiding the placeholder\n    // without swiftkey picking it up is the keydown event, so we have to hide it\n    // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n    if (!hasPendingDiffs()) {\n      updatePlaceholderVisibility(true);\n      setTimeout(updatePlaceholderVisibility);\n    }\n  };\n  var scheduleFlush = () => {\n    if (!hasPendingAction()) {\n      actionTimeoutId = setTimeout(flush);\n    }\n  };\n  var handleDomMutations = mutations => {\n    if (hasPendingDiffs() || hasPendingAction()) {\n      return;\n    }\n    if (mutations.some(mutation => isTrackedMutation(editor, mutation, mutations))) {\n      var _EDITOR_TO_FORCE_REND;\n      // Cause a re-render to restore the dom state if we encounter tracked mutations without\n      // a corresponding pending action.\n      (_EDITOR_TO_FORCE_REND = EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();\n    }\n  };\n  return {\n    flush,\n    scheduleFlush,\n    hasPendingDiffs,\n    hasPendingAction,\n    hasPendingChanges,\n    isFlushing,\n    handleUserSelect,\n    handleCompositionEnd,\n    handleCompositionStart,\n    handleDOMBeforeInput,\n    handleKeyDown,\n    handleDomMutations,\n    handleInput\n  };\n}\nfunction useIsMounted() {\n  var isMountedRef = useRef(false);\n  useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return isMountedRef.current;\n}\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\nvar useIsomorphicLayoutEffect = CAN_USE_DOM ? useLayoutEffect : useEffect;\nfunction useMutationObserver(node, callback, options) {\n  var [mutationObserver] = useState(() => new MutationObserver(callback));\n  useIsomorphicLayoutEffect(() => {\n    // Discard mutations caused during render phase. This works due to react calling\n    // useLayoutEffect synchronously after the render phase before the next tick.\n    mutationObserver.takeRecords();\n  });\n  useEffect(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n    mutationObserver.observe(node.current, options);\n    return () => mutationObserver.disconnect();\n  }, [mutationObserver, node, options]);\n}\nvar _excluded$2 = [\"node\"];\nfunction ownKeys$4(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$4(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar MUTATION_OBSERVER_CONFIG$1 = {\n  subtree: true,\n  childList: true,\n  characterData: true\n};\nvar useAndroidInputManager = !IS_ANDROID ? () => null : _ref => {\n  var {\n      node\n    } = _ref,\n    options = _objectWithoutProperties(_ref, _excluded$2);\n  if (!IS_ANDROID) {\n    return null;\n  }\n  var editor = useSlateStatic();\n  var isMounted = useIsMounted();\n  var [inputManager] = useState(() => createAndroidInputManager(_objectSpread$4({\n    editor\n  }, options)));\n  useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);\n  EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);\n  if (isMounted) {\n    inputManager.flush();\n  }\n  return inputManager;\n};\nfunction ownKeys$3(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$3(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n/**\n * Leaf content strings.\n */\nvar String$1 = props => {\n  var {\n    isLast,\n    leaf,\n    parent,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = Path.parent(path);\n  var isMarkPlaceholder = Boolean(leaf[MARK_PLACEHOLDER_SYMBOL]);\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      length: Node.string(parent).length\n    });\n  }\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && Editor.string(editor, parentPath) === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      isLineBreak: true,\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return /*#__PURE__*/React.createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n  return /*#__PURE__*/React.createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\n * Leaf strings with text in them.\n */\nvar TextString = props => {\n  var {\n    text,\n    isTrailing = false\n  } = props;\n  var ref = useRef(null);\n  var getTextContent = () => {\n    return \"\".concat(text !== null && text !== void 0 ? text : '').concat(isTrailing ? '\\n' : '');\n  };\n  var [initialText] = useState(getTextContent);\n  // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n  // useLayoutEffect: updating our span before browser paint\n  useIsomorphicLayoutEffect(() => {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    var textWithTrailing = getTextContent();\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing;\n    }\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n  });\n  // We intentionally render a memoized <span> that only receives the initial text content when the component is mounted.\n  // We defer to the layout effect above to update the `textContent` of the span element when needed.\n  return /*#__PURE__*/React.createElement(MemoizedText$1, {\n    ref: ref\n  }, initialText);\n};\nvar MemoizedText$1 = /*#__PURE__*/memo(/*#__PURE__*/forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-string\": true,\n    ref: ref\n  }, props.children);\n}));\n/**\n * Leaf strings without text, render as zero-width strings.\n */\nvar ZeroWidthString = props => {\n  var {\n    length = 0,\n    isLineBreak = false,\n    isMarkPlaceholder = false\n  } = props;\n  var attributes = {\n    'data-slate-zero-width': isLineBreak ? 'n' : 'z',\n    'data-slate-length': length\n  };\n  if (isMarkPlaceholder) {\n    attributes['data-slate-mark-placeholder'] = true;\n  }\n  return /*#__PURE__*/React.createElement(\"span\", _objectSpread$3({}, attributes), !(IS_ANDROID || IS_IOS) || !isLineBreak ? '\\uFEFF' : null, isLineBreak ? /*#__PURE__*/React.createElement(\"br\", null) : null);\n};\nfunction ownKeys$2(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n// Delay the placeholder on Android to prevent the keyboard from closing.\n// (https://github.com/ianstormtaylor/slate/pull/5368)\nvar PLACEHOLDER_DELAY = IS_ANDROID ? 300 : 0;\nfunction disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {\n  if (placeholderResizeObserver.current) {\n    placeholderResizeObserver.current.disconnect();\n    if (releaseObserver) {\n      placeholderResizeObserver.current = null;\n    }\n  }\n}\nfunction clearTimeoutRef(timeoutRef) {\n  if (timeoutRef.current) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = null;\n  }\n}\n/**\n * Individual leaves in a text node with unique formatting.\n */\nvar Leaf = props => {\n  var {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = props => /*#__PURE__*/React.createElement(DefaultLeaf, _objectSpread$2({}, props))\n  } = props;\n  var editor = useSlateStatic();\n  var placeholderResizeObserver = useRef(null);\n  var placeholderRef = useRef(null);\n  var [showPlaceholder, setShowPlaceholder] = useState(false);\n  var showPlaceholderTimeoutRef = useRef(null);\n  var callbackPlaceholderRef = useCallback(placeholderEl => {\n    disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);\n    if (placeholderEl == null) {\n      var _leaf$onPlaceholderRe;\n      EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);\n      (_leaf$onPlaceholderRe = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 || _leaf$onPlaceholderRe.call(leaf, null);\n    } else {\n      EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);\n      if (!placeholderResizeObserver.current) {\n        // Create a new observer and observe the placeholder element.\n        var ResizeObserver$1 = window.ResizeObserver || ResizeObserver;\n        placeholderResizeObserver.current = new ResizeObserver$1(() => {\n          var _leaf$onPlaceholderRe2;\n          (_leaf$onPlaceholderRe2 = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 || _leaf$onPlaceholderRe2.call(leaf, placeholderEl);\n        });\n      }\n      placeholderResizeObserver.current.observe(placeholderEl);\n      placeholderRef.current = placeholderEl;\n    }\n  }, [placeholderRef, leaf, editor]);\n  var children = /*#__PURE__*/React.createElement(String$1, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n  var leafIsPlaceholder = Boolean(leaf[PLACEHOLDER_SYMBOL]);\n  useEffect(() => {\n    if (leafIsPlaceholder) {\n      if (!showPlaceholderTimeoutRef.current) {\n        // Delay the placeholder, so it will not render in a selection\n        showPlaceholderTimeoutRef.current = setTimeout(() => {\n          setShowPlaceholder(true);\n          showPlaceholderTimeoutRef.current = null;\n        }, PLACEHOLDER_DELAY);\n      }\n    } else {\n      clearTimeoutRef(showPlaceholderTimeoutRef);\n      setShowPlaceholder(false);\n    }\n    return () => clearTimeoutRef(showPlaceholderTimeoutRef);\n  }, [leafIsPlaceholder, setShowPlaceholder]);\n  if (leafIsPlaceholder && showPlaceholder) {\n    var placeholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          top: 0,\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n          // Fixes https://github.com/udecode/plate/issues/2315\n          WebkitUserModify: IS_WEBKIT ? 'inherit' : undefined\n        },\n        contentEditable: false,\n        ref: callbackPlaceholderRef\n      }\n    };\n    children = /*#__PURE__*/React.createElement(React.Fragment, null, renderPlaceholder(placeholderProps), children);\n  }\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes,\n    children,\n    leaf,\n    text\n  });\n};\nvar MemoizedLeaf = /*#__PURE__*/React.memo(Leaf, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && Text$1.equals(next.leaf, prev.leaf) && next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL];\n});\nvar DefaultLeaf = props => {\n  var {\n    attributes,\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(\"span\", _objectSpread$2({}, attributes), children);\n};\n\n/**\n * Text.\n */\nvar Text = props => {\n  var {\n    decorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var ref = useRef(null);\n  var leaves = Text$1.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n  for (var i = 0; i < leaves.length; i++) {\n    var leaf = leaves[i];\n    children.push(/*#__PURE__*/React.createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      renderPlaceholder: renderPlaceholder,\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  }\n  // Update element-related weak maps with the DOM element ref.\n  var callbackRef = useCallback(span => {\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (span) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, span);\n      NODE_TO_ELEMENT.set(text, span);\n      ELEMENT_TO_NODE.set(span, text);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(text);\n      if (ref.current) {\n        ELEMENT_TO_NODE.delete(ref.current);\n      }\n    }\n    ref.current = span;\n  }, [ref, editor, key, text]);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: callbackRef\n  }, children);\n};\nvar MemoizedText = /*#__PURE__*/React.memo(Text, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && isTextDecorationsEqual(next.decorations, prev.decorations);\n});\nfunction ownKeys$1(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$1(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n/**\n * Element.\n */\nvar Element = props => {\n  var {\n    decorations,\n    element,\n    renderElement = p => /*#__PURE__*/React.createElement(DefaultElement, _objectSpread$1({}, p)),\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  } = props;\n  var editor = useSlateStatic();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var key = ReactEditor.findKey(editor, element);\n  var ref = useCallback(ref => {\n    // Update element-related weak maps with the DOM element ref.\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (ref) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref);\n      NODE_TO_ELEMENT.set(element, ref);\n      ELEMENT_TO_NODE.set(ref, element);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(element);\n    }\n  }, [editor, key, element]);\n  var children = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  });\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  var attributes = {\n    'data-slate-node': 'element',\n    ref\n  };\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  }\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    var text = Node.string(element);\n    var dir = getDirection(text);\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  }\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n    var Tag = isInline ? 'span' : 'div';\n    var [[_text]] = Node.texts(element);\n    children = /*#__PURE__*/React.createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, /*#__PURE__*/React.createElement(MemoizedText, {\n      renderPlaceholder: renderPlaceholder,\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    NODE_TO_INDEX.set(_text, 0);\n    NODE_TO_PARENT.set(_text, element);\n  }\n  return renderElement({\n    attributes,\n    children,\n    element\n  });\n};\nvar MemoizedElement = /*#__PURE__*/React.memo(Element, (prev, next) => {\n  return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && prev.renderPlaceholder === next.renderPlaceholder && isElementDecorationsEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && Range.equals(prev.selection, next.selection));\n});\n/**\n * The default element renderer.\n */\nvar DefaultElement = props => {\n  var {\n    attributes,\n    children,\n    element\n  } = props;\n  var editor = useSlateStatic();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return /*#__PURE__*/React.createElement(Tag, _objectSpread$1(_objectSpread$1({}, attributes), {}, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\nvar DecorateContext = /*#__PURE__*/createContext(() => []);\n/**\n * Get the current `decorate` prop of the editable.\n */\nvar useDecorate = () => {\n  return useContext(DecorateContext);\n};\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\nvar SelectedContext = /*#__PURE__*/createContext(false);\n/**\n * Get the current `selected` state of an element.\n */\nvar useSelected = () => {\n  return useContext(SelectedContext);\n};\n\n/**\n * Children.\n */\nvar useChildren = props => {\n  var {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  } = props;\n  var decorate = useDecorate();\n  var editor = useSlateStatic();\n  IS_NODE_MAP_DIRTY.set(editor, false);\n  var path = ReactEditor.findPath(editor, node);\n  var children = [];\n  var isLeafBlock = Element$1.isElement(node) && !editor.isInline(node) && Editor.hasInlines(editor, node);\n  for (var i = 0; i < node.children.length; i++) {\n    var p = path.concat(i);\n    var n = node.children[i];\n    var key = ReactEditor.findKey(editor, n);\n    var range = Editor.range(editor, p);\n    var sel = selection && Range.intersection(range, selection);\n    var ds = decorate([n, p]);\n    for (var dec of decorations) {\n      var d = Range.intersection(dec, range);\n      if (d) {\n        ds.push(d);\n      }\n    }\n    if (Element$1.isElement(n)) {\n      children.push(/*#__PURE__*/React.createElement(SelectedContext.Provider, {\n        key: \"provider-\".concat(key.id),\n        value: !!sel\n      }, /*#__PURE__*/React.createElement(MemoizedElement, {\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: sel\n      })));\n    } else {\n      children.push(/*#__PURE__*/React.createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n    NODE_TO_INDEX.set(n, i);\n    NODE_TO_PARENT.set(n, node);\n  }\n  return children;\n};\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\nvar ReadOnlyContext = /*#__PURE__*/createContext(false);\n/**\n * Get the current `readOnly` state of the editor.\n */\nvar useReadOnly = () => {\n  return useContext(ReadOnlyContext);\n};\nvar SlateContext = /*#__PURE__*/createContext(null);\n/**\n * Get the current editor object from the React context.\n */\nvar useSlate = () => {\n  var context = useContext(SlateContext);\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  var {\n    editor\n  } = context;\n  return editor;\n};\nvar useSlateWithV = () => {\n  var context = useContext(SlateContext);\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  return context;\n};\nfunction useTrackUserInput() {\n  var editor = useSlateStatic();\n  var receivedUserInput = useRef(false);\n  var animationFrameIdRef = useRef(0);\n  var onUserInput = useCallback(() => {\n    if (receivedUserInput.current) {\n      return;\n    }\n    receivedUserInput.current = true;\n    var window = ReactEditor.getWindow(editor);\n    window.cancelAnimationFrame(animationFrameIdRef.current);\n    animationFrameIdRef.current = window.requestAnimationFrame(() => {\n      receivedUserInput.current = false;\n    });\n  }, [editor]);\n  useEffect(() => () => cancelAnimationFrame(animationFrameIdRef.current), []);\n  return {\n    receivedUserInput,\n    onUserInput\n  };\n}\nvar createRestoreDomManager = (editor, receivedUserInput) => {\n  var bufferedMutations = [];\n  var clear = () => {\n    bufferedMutations = [];\n  };\n  var registerMutations = mutations => {\n    if (!receivedUserInput.current) {\n      return;\n    }\n    var trackedMutations = mutations.filter(mutation => isTrackedMutation(editor, mutation, mutations));\n    bufferedMutations.push(...trackedMutations);\n  };\n  function restoreDOM() {\n    if (bufferedMutations.length > 0) {\n      bufferedMutations.reverse().forEach(mutation => {\n        if (mutation.type === 'characterData') {\n          // We don't want to restore the DOM for characterData mutations\n          // because this interrupts the composition.\n          return;\n        }\n        mutation.removedNodes.forEach(node => {\n          mutation.target.insertBefore(node, mutation.nextSibling);\n        });\n        mutation.addedNodes.forEach(node => {\n          mutation.target.removeChild(node);\n        });\n      });\n      // Clear buffered mutations to ensure we don't undo them twice\n      clear();\n    }\n  }\n  return {\n    registerMutations,\n    restoreDOM,\n    clear\n  };\n};\nvar MUTATION_OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true\n};\n// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\nclass RestoreDOMComponent extends Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"context\", null);\n    _defineProperty(this, \"manager\", null);\n    _defineProperty(this, \"mutationObserver\", null);\n  }\n  observe() {\n    var _this$mutationObserve;\n    var {\n      node\n    } = this.props;\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n    (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG);\n  }\n  componentDidMount() {\n    var {\n      receivedUserInput\n    } = this.props;\n    var editor = this.context;\n    this.manager = createRestoreDomManager(editor, receivedUserInput);\n    this.mutationObserver = new MutationObserver(this.manager.registerMutations);\n    this.observe();\n  }\n  getSnapshotBeforeUpdate() {\n    var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;\n    var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();\n    if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {\n      var _this$manager;\n      (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);\n    }\n    (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();\n    (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();\n    return null;\n  }\n  componentDidUpdate() {\n    var _this$manager3;\n    (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();\n    this.observe();\n  }\n  componentWillUnmount() {\n    var _this$mutationObserve4;\n    (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();\n  }\n  render() {\n    return this.props.children;\n  }\n}\n_defineProperty(RestoreDOMComponent, \"contextType\", EditorContext);\nvar RestoreDOM = IS_ANDROID ? RestoreDOMComponent : _ref => {\n  var {\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\n/**\n * A React context for sharing the `composing` state of the editor.\n */\nvar ComposingContext = /*#__PURE__*/createContext(false);\n/**\n * Get the current `composing` state of the editor.\n */\nvar useComposing = () => {\n  return useContext(ComposingContext);\n};\nvar _excluded$1 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"scrollSelectionIntoView\", \"style\", \"as\", \"disableDefaultStyles\"],\n  _excluded2 = [\"text\"];\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar Children = props => /*#__PURE__*/React.createElement(React.Fragment, null, useChildren(props));\n/**\n * Editable.\n */\nvar Editable = /*#__PURE__*/forwardRef((props, forwardedRef) => {\n  var defaultRenderPlaceholder = useCallback(props => /*#__PURE__*/React.createElement(DefaultPlaceholder, _objectSpread({}, props)), []);\n  var {\n      autoFocus,\n      decorate = defaultDecorate,\n      onDOMBeforeInput: propsOnDOMBeforeInput,\n      placeholder,\n      readOnly = false,\n      renderElement,\n      renderLeaf,\n      renderPlaceholder = defaultRenderPlaceholder,\n      scrollSelectionIntoView = defaultScrollSelectionIntoView,\n      style: userStyle = {},\n      as: Component = 'div',\n      disableDefaultStyles = false\n    } = props,\n    attributes = _objectWithoutProperties(props, _excluded$1);\n  var editor = useSlate();\n  // Rerender editor when composition status changed\n  var [isComposing, setIsComposing] = useState(false);\n  var ref = useRef(null);\n  var deferredOperations = useRef([]);\n  var [placeholderHeight, setPlaceholderHeight] = useState();\n  var processing = useRef(false);\n  var {\n    onUserInput,\n    receivedUserInput\n  } = useTrackUserInput();\n  var [, forceRender] = useReducer(s => s + 1, 0);\n  EDITOR_TO_FORCE_RENDER.set(editor, forceRender);\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly);\n  // Keep track of some state for the event handler logic.\n  var state = useMemo(() => ({\n    isDraggingInternally: false,\n    isUpdatingSelection: false,\n    latestElement: null,\n    hasMarkPlaceholder: false\n  }), []);\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]);\n  /**\n   * The AndroidInputManager object has a cyclical dependency on onDOMSelectionChange\n   *\n   * It is defined as a reference to simplify hook dependencies and clarify that\n   * it needs to be initialized.\n   */\n  var androidInputManagerRef = useRef();\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  var onDOMSelectionChange = useMemo(() => throttle(() => {\n    if (IS_NODE_MAP_DIRTY.get(editor)) {\n      onDOMSelectionChange();\n      return;\n    }\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n    if (!processing.current && IS_WEBKIT && root instanceof ShadowRoot) {\n      processing.current = true;\n      var active = getActiveElement();\n      if (active) {\n        document.execCommand('indent');\n      } else {\n        Transforms.deselect(editor);\n      }\n      processing.current = false;\n      return;\n    }\n    var androidInputManager = androidInputManagerRef.current;\n    if ((IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {\n      var _root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var {\n        activeElement\n      } = _root;\n      var _el = ReactEditor.toDOMNode(editor, editor);\n      var domSelection = getSelection(_root);\n      if (activeElement === _el) {\n        state.latestElement = activeElement;\n        IS_FOCUSED.set(editor, true);\n      } else {\n        IS_FOCUSED.delete(editor);\n      }\n      if (!domSelection) {\n        return Transforms.deselect(editor);\n      }\n      var {\n        anchorNode,\n        focusNode\n      } = domSelection;\n      var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);\n      var focusNodeInEditor = ReactEditor.hasTarget(editor, focusNode);\n      if (anchorNodeSelectable && focusNodeInEditor) {\n        var range = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n        if (range) {\n          if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {\n            Transforms.select(editor, range);\n          } else {\n            androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range);\n          }\n        }\n      }\n      // Deselect the editor if the dom selection is not selectable in readonly mode\n      if (readOnly && (!anchorNodeSelectable || !focusNodeInEditor)) {\n        Transforms.deselect(editor);\n      }\n    }\n  }, 100), [editor, readOnly, state]);\n  var scheduleOnDOMSelectionChange = useMemo(() => debounce(onDOMSelectionChange, 0), [onDOMSelectionChange]);\n  androidInputManagerRef.current = useAndroidInputManager({\n    node: ref,\n    onDOMSelectionChange,\n    scheduleOnDOMSelectionChange\n  });\n  useIsomorphicLayoutEffect(() => {\n    var _androidInputManagerR, _androidInputManagerR2;\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window);\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      NODE_TO_ELEMENT.delete(editor);\n    }\n    // Make sure the DOM selection state is in sync.\n    var {\n      selection\n    } = editor;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = getSelection(root);\n    if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {\n      return;\n    }\n    var setDomSelection = forceChange => {\n      var hasDomSelection = domSelection.type !== 'None';\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return;\n      }\n      // Get anchorNode and focusNode\n      var focusNode = domSelection.focusNode;\n      var anchorNode;\n      // COMPAT: In firefox the normal selection way does not work\n      // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n      if (IS_FIREFOX && domSelection.rangeCount > 1) {\n        var firstRange = domSelection.getRangeAt(0);\n        var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);\n        // Right to left\n        if (firstRange.startContainer === focusNode) {\n          anchorNode = lastRange.endContainer;\n        } else {\n          // Left to right\n          anchorNode = firstRange.startContainer;\n        }\n      } else {\n        anchorNode = domSelection.anchorNode;\n      }\n      // verify that the dom selection is in the editor\n      var editorElement = EDITOR_TO_ELEMENT.get(editor);\n      var hasDomSelectionInEditor = false;\n      if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {\n        hasDomSelectionInEditor = true;\n      }\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {\n        var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          // domSelection is not necessarily a valid Slate range\n          // (e.g. when clicking on contentEditable:false element)\n          suppressThrow: true\n        });\n        if (slateRange && Range.equals(slateRange, selection)) {\n          var _anchorNode;\n          if (!state.hasMarkPlaceholder) {\n            return;\n          }\n          // Ensure selection is inside the mark placeholder\n          if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode = _anchorNode.parentElement) !== null && _anchorNode !== void 0 && _anchorNode.hasAttribute('data-slate-mark-placeholder')) {\n            return;\n          }\n        }\n      }\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n        return;\n      }\n      // Otherwise the DOM selection is out of sync, so update it.\n      state.isUpdatingSelection = true;\n      var newDomRange = null;\n      try {\n        newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n      } catch (e) {\n        // Ignore, dom and state might be out of sync\n      }\n      if (newDomRange) {\n        if (ReactEditor.isComposing(editor) && !IS_ANDROID) {\n          domSelection.collapseToEnd();\n        } else if (Range.isBackward(selection)) {\n          domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n        } else {\n          domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n        }\n        scrollSelectionIntoView(editor, newDomRange);\n      } else {\n        domSelection.removeAllRanges();\n      }\n      return newDomRange;\n    };\n    // In firefox if there is more then 1 range and we call setDomSelection we remove the ability to select more cells in a table\n    if (domSelection.rangeCount <= 1) {\n      setDomSelection();\n    }\n    var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === 'action';\n    if (!IS_ANDROID || !ensureSelection) {\n      setTimeout(() => {\n        state.isUpdatingSelection = false;\n      });\n      return;\n    }\n    var timeoutId = null;\n    var animationFrameId = requestAnimationFrame(() => {\n      if (ensureSelection) {\n        var ensureDomSelection = forceChange => {\n          try {\n            var el = ReactEditor.toDOMNode(editor, editor);\n            el.focus();\n            setDomSelection(forceChange);\n          } catch (e) {\n            // Ignore, dom and state might be out of sync\n          }\n        };\n        // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n        // This essentially would make setting the slate selection during an update meaningless, so we force it\n        // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n        // visible flicker.\n        ensureDomSelection();\n        timeoutId = setTimeout(() => {\n          // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n          // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n          // the animation frame to ensure it displays the correct state.\n          ensureDomSelection(true);\n          state.isUpdatingSelection = false;\n        });\n      }\n    });\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  var onDOMBeforeInput = useCallback(event => {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n    if (processing !== null && processing !== void 0 && processing.current && IS_WEBKIT && root instanceof ShadowRoot) {\n      var ranges = event.getTargetRanges();\n      var range = ranges[0];\n      var newRange = new window.Range();\n      newRange.setStart(range.startContainer, range.startOffset);\n      newRange.setEnd(range.endContainer, range.endOffset);\n      // Translate the DOM Range into a Slate Range\n      var slateRange = ReactEditor.toSlateRange(editor, newRange, {\n        exactMatch: false,\n        suppressThrow: false\n      });\n      Transforms.select(editor, slateRange);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      return;\n    }\n    onUserInput();\n    if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      var _EDITOR_TO_USER_SELEC;\n      // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n      if (androidInputManagerRef.current) {\n        return androidInputManagerRef.current.handleDOMBeforeInput(event);\n      }\n      // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n      // triggering a `beforeinput` expecting the change to be applied to the immediately before\n      // set selection.\n      scheduleOnDOMSelectionChange.flush();\n      onDOMSelectionChange.flush();\n      var {\n        selection\n      } = editor;\n      var {\n        inputType: type\n      } = event;\n      var data = event.dataTransfer || event.data || undefined;\n      var isCompositionChange = type === 'insertCompositionText' || type === 'deleteCompositionText';\n      // COMPAT: use composition change events as a hint to where we should insert\n      // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n      if (isCompositionChange && ReactEditor.isComposing(editor)) {\n        return;\n      }\n      var native = false;\n      if (type === 'insertText' && selection && Range.isCollapsed(selection) &&\n      // Only use native character insertion for single characters a-z or space for now.\n      // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n      // causes duplicate inserts.\n      event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) &&\n      // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n      // When there is an inline element, e.g. a link, and you select\n      // right after it (the start of the next node).\n      selection.anchor.offset !== 0) {\n        native = true;\n        // Skip native if there are marks, as\n        // `insertText` will insert a node, not just text.\n        if (editor.marks) {\n          native = false;\n        }\n        // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint)\n        if (!IS_NODE_MAP_DIRTY.get(editor)) {\n          var _node$parentElement, _window$getComputedSt;\n          // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n          // Therefore we don't allow native events to insert text at the end of anchor nodes.\n          var {\n            anchor\n          } = selection;\n          var [node, offset] = ReactEditor.toDOMPoint(editor, anchor);\n          var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest('a');\n          var _window = ReactEditor.getWindow(editor);\n          if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n            var _lastText$textContent;\n            // Find the last text node inside the anchor.\n            var lastText = _window === null || _window === void 0 ? void 0 : _window.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();\n            if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {\n              native = false;\n            }\n          }\n          // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n          // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n          if (native && node.parentElement && (_window === null || _window === void 0 || (_window$getComputedSt = _window.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === 'pre') {\n            var block = Editor.above(editor, {\n              at: anchor.path,\n              match: n => Element$1.isElement(n) && Editor.isBlock(editor, n)\n            });\n            if (block && Node.string(block[0]).includes('\\t')) {\n              native = false;\n            }\n          }\n        }\n      }\n      // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n      // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint via ReactEditor.toSlateRange)\n      if ((!type.startsWith('delete') || type.startsWith('deleteBy')) && !IS_NODE_MAP_DIRTY.get(editor)) {\n        var [targetRange] = event.getTargetRanges();\n        if (targetRange) {\n          var _range = ReactEditor.toSlateRange(editor, targetRange, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n          if (!selection || !Range.equals(selection, _range)) {\n            native = false;\n            var selectionRef = !isCompositionChange && editor.selection && Editor.rangeRef(editor, editor.selection);\n            Transforms.select(editor, _range);\n            if (selectionRef) {\n              EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n            }\n          }\n        }\n      }\n      // Composition change types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n      if (isCompositionChange) {\n        return;\n      }\n      if (!native) {\n        event.preventDefault();\n      }\n      // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n      if (selection && Range.isExpanded(selection) && type.startsWith('delete')) {\n        var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n        Editor.deleteFragment(editor, {\n          direction\n        });\n        return;\n      }\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            Editor.deleteFragment(editor);\n            break;\n          }\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            Editor.deleteForward(editor);\n            break;\n          }\n        case 'deleteContentBackward':\n          {\n            Editor.deleteBackward(editor);\n            break;\n          }\n        case 'deleteEntireSoftLine':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteWordBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'deleteWordForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'insertLineBreak':\n          Editor.insertSoftBreak(editor);\n          break;\n        case 'insertParagraph':\n          {\n            Editor.insertBreak(editor);\n            break;\n          }\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              if (ReactEditor.isComposing(editor)) {\n                setIsComposing(false);\n                IS_COMPOSING.set(editor, false);\n              }\n            }\n            // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === 'DataTransfer') {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (native) {\n                deferredOperations.current.push(() => Editor.insertText(editor, data));\n              } else {\n                Editor.insertText(editor, data);\n              }\n            }\n            break;\n          }\n      }\n      // Restore the actual user section if nothing manually set it.\n      var toRestore = (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n      EDITOR_TO_USER_SELECTION.delete(editor);\n      if (toRestore && (!editor.selection || !Range.equals(editor.selection, toRestore))) {\n        Transforms.select(editor, toRestore);\n      }\n    }\n  }, [editor, onDOMSelectionChange, onUserInput, propsOnDOMBeforeInput, readOnly, scheduleOnDOMSelectionChange]);\n  var callbackRef = useCallback(node => {\n    if (node == null) {\n      onDOMSelectionChange.cancel();\n      scheduleOnDOMSelectionChange.cancel();\n      EDITOR_TO_ELEMENT.delete(editor);\n      NODE_TO_ELEMENT.delete(editor);\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    } else {\n      // Attach a native DOM event handler for `beforeinput` events, because React's\n      // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n      // real `beforeinput` events sadly... (2019/11/04)\n      // https://github.com/facebook/react/issues/11211\n      if (HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        node.addEventListener('beforeinput', onDOMBeforeInput);\n      }\n    }\n    ref.current = node;\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(node);\n    } else if (forwardedRef) {\n      forwardedRef.current = node;\n    }\n  }, [onDOMSelectionChange, scheduleOnDOMSelectionChange, editor, onDOMBeforeInput, forwardedRef]);\n  useIsomorphicLayoutEffect(() => {\n    var window = ReactEditor.getWindow(editor);\n    // COMPAT: In Chrome, `selectionchange` events can fire when <input> and\n    // <textarea> elements are appended to the DOM, causing\n    // `editor.selection` to be overwritten in some circumstances.\n    // (2025/01/16) https://issues.chromium.org/issues/389368412\n    var onSelectionChange = _ref => {\n      var {\n        target\n      } = _ref;\n      var targetElement = target instanceof HTMLElement ? target : null;\n      var targetTagName = targetElement === null || targetElement === void 0 ? void 0 : targetElement.tagName;\n      if (targetTagName === 'INPUT' || targetTagName === 'TEXTAREA') {\n        return;\n      }\n      scheduleOnDOMSelectionChange();\n    };\n    // Attach a native DOM event handler for `selectionchange`, because React's\n    // built-in `onSelect` handler doesn't fire for all selection changes. It's\n    // a leaky polyfill that only fires on keypresses or clicks. Instead, we\n    // want to fire for any change to the selection inside the editor.\n    // (2019/11/04) https://github.com/facebook/react/issues/5785\n    window.document.addEventListener('selectionchange', onSelectionChange);\n    // Listen for dragend and drop globally. In Firefox, if a drop handler\n    // initiates an operation that causes the originally dragged element to\n    // unmount, that element will not emit a dragend event. (2024/06/21)\n    var stoppedDragging = () => {\n      state.isDraggingInternally = false;\n    };\n    window.document.addEventListener('dragend', stoppedDragging);\n    window.document.addEventListener('drop', stoppedDragging);\n    return () => {\n      window.document.removeEventListener('selectionchange', onSelectionChange);\n      window.document.removeEventListener('dragend', stoppedDragging);\n      window.document.removeEventListener('drop', stoppedDragging);\n    };\n  }, [scheduleOnDOMSelectionChange, state]);\n  var decorations = decorate([editor, []]);\n  var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(Node.texts(editor)).length === 1 && Node.string(editor) === '' && !isComposing;\n  var placeHolderResizeHandler = useCallback(placeholderEl => {\n    if (placeholderEl && showPlaceholder) {\n      var _placeholderEl$getBou;\n      setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);\n    } else {\n      setPlaceholderHeight(undefined);\n    }\n  }, [showPlaceholder]);\n  if (showPlaceholder) {\n    var start = Editor.start(editor, []);\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      onPlaceholderResize: placeHolderResizeHandler,\n      anchor: start,\n      focus: start\n    });\n  }\n  var {\n    marks\n  } = editor;\n  state.hasMarkPlaceholder = false;\n  if (editor.selection && Range.isCollapsed(editor.selection) && marks) {\n    var {\n      anchor\n    } = editor.selection;\n    var leaf = Node.leaf(editor, anchor.path);\n    var rest = _objectWithoutProperties(leaf, _excluded2);\n    // While marks isn't a 'complete' text, we can still use loose Text.equals\n    // here which only compares marks anyway.\n    if (!Text$1.equals(leaf, marks, {\n      loose: true\n    })) {\n      state.hasMarkPlaceholder = true;\n      var unset = Object.fromEntries(Object.keys(rest).map(mark => [mark, null]));\n      decorations.push(_objectSpread(_objectSpread(_objectSpread({\n        [MARK_PLACEHOLDER_SYMBOL]: true\n      }, unset), marks), {}, {\n        anchor,\n        focus: anchor\n      }));\n    }\n  }\n  // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n  // before we receive the composition end event.\n  useEffect(() => {\n    setTimeout(() => {\n      var {\n        selection\n      } = editor;\n      if (selection) {\n        var {\n          anchor: _anchor\n        } = selection;\n        var _text = Node.leaf(editor, _anchor.path);\n        // While marks isn't a 'complete' text, we can still use loose Text.equals\n        // here which only compares marks anyway.\n        if (marks && !Text$1.equals(_text, marks, {\n          loose: true\n        })) {\n          EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);\n          return;\n        }\n      }\n      EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n    });\n  });\n  return /*#__PURE__*/React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/React.createElement(ComposingContext.Provider, {\n    value: isComposing\n  }, /*#__PURE__*/React.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/React.createElement(RestoreDOM, {\n    node: ref,\n    receivedUserInput: receivedUserInput\n  }, /*#__PURE__*/React.createElement(Component, _objectSpread(_objectSpread({\n    role: readOnly ? undefined : 'textbox',\n    \"aria-multiline\": readOnly ? undefined : true\n  }, attributes), {}, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n    // mismatch warning app moves to browser. Pass-through consumer props when\n    // not CAN_USE_DOM (SSR) and default to falsy value\n    spellCheck: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.spellCheck : false,\n    autoCorrect: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCorrect : 'false',\n    autoCapitalize: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCapitalize : 'false',\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    // explicitly set this\n    contentEditable: !readOnly,\n    // in some cases, a decoration needs access to the range / selection to decorate a text node,\n    // then you will select the whole text node when you select part the of text\n    // this magic zIndex=\"-1\" will fix it\n    zindex: -1,\n    suppressContentEditableWarning: true,\n    ref: callbackRef,\n    style: _objectSpread(_objectSpread({}, disableDefaultStyles ? {} : _objectSpread({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, placeholderHeight ? {\n      minHeight: placeholderHeight\n    } : {})), userStyle),\n    onBeforeInput: useCallback(event => {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {\n        event.preventDefault();\n        if (!ReactEditor.isComposing(editor)) {\n          var _text2 = event.data;\n          Editor.insertText(editor, _text2);\n        }\n      }\n    }, [attributes.onBeforeInput, editor, readOnly]),\n    onInput: useCallback(event => {\n      if (isEventHandled(event, attributes.onInput)) {\n        return;\n      }\n      if (androidInputManagerRef.current) {\n        androidInputManagerRef.current.handleInput();\n        return;\n      }\n      // Flush native operations, as native events will have propogated\n      // and we can correctly compare DOM text values in components\n      // to stop rendering, so that browser functions like autocorrect\n      // and spellcheck work as expected.\n      for (var op of deferredOperations.current) {\n        op();\n      }\n      deferredOperations.current = [];\n      // COMPAT: Since `beforeinput` doesn't fully `preventDefault`,\n      // there's a chance that content might be placed in the browser's undo stack.\n      // This means undo can be triggered even when the div is not focused,\n      // and it only triggers the input event for the node. (2024/10/09)\n      if (!ReactEditor.isFocused(editor)) {\n        var native = event.nativeEvent;\n        var maybeHistoryEditor = editor;\n        if (native.inputType === 'historyUndo' && typeof maybeHistoryEditor.undo === 'function') {\n          maybeHistoryEditor.undo();\n          return;\n        }\n        if (native.inputType === 'historyRedo' && typeof maybeHistoryEditor.redo === 'function') {\n          maybeHistoryEditor.redo();\n          return;\n        }\n      }\n    }, [attributes.onInput, editor]),\n    onBlur: useCallback(event => {\n      if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      }\n      // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n      var {\n        relatedTarget\n      } = event;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n      if (relatedTarget === el) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n        if (Element$1.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n      // COMPAT: Safari doesn't always remove the selection even if the content-\n      // editable element no longer has focus. Refer to:\n      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n      if (IS_WEBKIT) {\n        var domSelection = getSelection(root);\n        domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();\n      }\n      IS_FOCUSED.delete(editor);\n    }, [readOnly, state.isUpdatingSelection, state.latestElement, editor, attributes.onBlur]),\n    onClick: useCallback(event => {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        // At this time, the Slate document may be arbitrarily different,\n        // because onClick handlers can change the document before we get here.\n        // Therefore we must check that this path actually exists,\n        // and that it still refers to the same node.\n        if (!Editor.hasPath(editor, path) || Node.get(editor, path) !== node) {\n          return;\n        }\n        if (event.detail === TRIPLE_CLICK && path.length >= 1) {\n          var blockPath = path;\n          if (!(Element$1.isElement(node) && Editor.isBlock(editor, node))) {\n            var _block$;\n            var block = Editor.above(editor, {\n              match: n => Element$1.isElement(n) && Editor.isBlock(editor, n),\n              at: path\n            });\n            blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);\n          }\n          var range = Editor.range(editor, blockPath);\n          Transforms.select(editor, range);\n          return;\n        }\n        if (readOnly) {\n          return;\n        }\n        var _start = Editor.start(editor, path);\n        var end = Editor.end(editor, path);\n        var startVoid = Editor.void(editor, {\n          at: _start\n        });\n        var endVoid = Editor.void(editor, {\n          at: end\n        });\n        if (startVoid && endVoid && Path.equals(startVoid[1], endVoid[1])) {\n          var _range2 = Editor.range(editor, _start);\n          Transforms.select(editor, _range2);\n        }\n      }\n    }, [editor, attributes.onClick, readOnly]),\n    onCompositionEnd: useCallback(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR3;\n        if (ReactEditor.isComposing(editor)) {\n          Promise.resolve().then(() => {\n            setIsComposing(false);\n            IS_COMPOSING.set(editor, false);\n          });\n        }\n        (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 || _androidInputManagerR3.handleCompositionEnd(event);\n        if (isEventHandled(event, attributes.onCompositionEnd) || IS_ANDROID) {\n          return;\n        }\n        // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n        if (!IS_WEBKIT && !IS_FIREFOX_LEGACY && !IS_IOS && !IS_WECHATBROWSER && !IS_UC_MOBILE && event.data) {\n          var placeholderMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n          EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n          // Ensure we insert text with the marks the user was actually seeing\n          if (placeholderMarks !== undefined) {\n            EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n            editor.marks = placeholderMarks;\n          }\n          Editor.insertText(editor, event.data);\n          var userMarks = EDITOR_TO_USER_MARKS.get(editor);\n          EDITOR_TO_USER_MARKS.delete(editor);\n          if (userMarks !== undefined) {\n            editor.marks = userMarks;\n          }\n        }\n      }\n    }, [attributes.onCompositionEnd, editor]),\n    onCompositionUpdate: useCallback(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        if (!ReactEditor.isComposing(editor)) {\n          setIsComposing(true);\n          IS_COMPOSING.set(editor, true);\n        }\n      }\n    }, [attributes.onCompositionUpdate, editor]),\n    onCompositionStart: useCallback(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR4;\n        (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 || _androidInputManagerR4.handleCompositionStart(event);\n        if (isEventHandled(event, attributes.onCompositionStart) || IS_ANDROID) {\n          return;\n        }\n        setIsComposing(true);\n        var {\n          selection\n        } = editor;\n        if (selection && Range.isExpanded(selection)) {\n          Editor.deleteFragment(editor);\n          return;\n        }\n      }\n    }, [attributes.onCompositionStart, editor]),\n    onCopy: useCallback(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'copy');\n      }\n    }, [attributes.onCopy, editor]),\n    onCut: useCallback(event => {\n      if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'cut');\n        var {\n          selection\n        } = editor;\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n          } else {\n            var node = Node.parent(editor, selection.anchor.path);\n            if (Editor.isVoid(editor, node)) {\n              Transforms.delete(editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onCut]),\n    onDragOver: useCallback(event => {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        if (Element$1.isElement(node) && Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver, editor]),\n    onDragStart: useCallback(event => {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = Element$1.isElement(node) && Editor.isVoid(editor, node) || Editor.void(editor, {\n          at: path,\n          voids: true\n        });\n        // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n        if (voidMatch) {\n          var range = Editor.range(editor, path);\n          Transforms.select(editor, range);\n        }\n        state.isDraggingInternally = true;\n        ReactEditor.setFragmentData(editor, event.dataTransfer, 'drag');\n      }\n    }, [readOnly, editor, attributes.onDragStart, state]),\n    onDrop: useCallback(event => {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n        event.preventDefault();\n        // Keep a reference to the dragged range before updating selection\n        var draggedRange = editor.selection;\n        // Find the range where the drop happened\n        var range = ReactEditor.findEventRange(editor, event);\n        var data = event.dataTransfer;\n        Transforms.select(editor, range);\n        if (state.isDraggingInternally) {\n          if (draggedRange && !Range.equals(draggedRange, range) && !Editor.void(editor, {\n            at: range,\n            voids: true\n          })) {\n            Transforms.delete(editor, {\n              at: draggedRange\n            });\n          }\n        }\n        ReactEditor.insertData(editor, data);\n        // When dragging from another source into the editor, it's possible\n        // that the current editor does not have focus.\n        if (!ReactEditor.isFocused(editor)) {\n          ReactEditor.focus(editor);\n        }\n      }\n    }, [readOnly, editor, attributes.onDrop, state]),\n    onDragEnd: useCallback(event => {\n      if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {\n        attributes.onDragEnd(event);\n      }\n    }, [readOnly, state, attributes, editor]),\n    onFocus: useCallback(event => {\n      if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement;\n        // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n        if (IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, state, editor, attributes.onFocus]),\n    onKeyDown: useCallback(event => {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {\n        var _androidInputManagerR5;\n        (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 || _androidInputManagerR5.handleKeyDown(event);\n        var {\n          nativeEvent\n        } = event;\n        // COMPAT: The composition end event isn't fired reliably in all browsers,\n        // so we sometimes might end up stuck in a composition state even though we\n        // aren't composing any more.\n        if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {\n          IS_COMPOSING.set(editor, false);\n          setIsComposing(false);\n        }\n        if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {\n          return;\n        }\n        var {\n          selection\n        } = editor;\n        var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n        var isRTL = getDirection(Node.string(element)) === 'rtl';\n        // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n        if (Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n          var maybeHistoryEditor = editor;\n          if (typeof maybeHistoryEditor.redo === 'function') {\n            maybeHistoryEditor.redo();\n          }\n          return;\n        }\n        if (Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n          var _maybeHistoryEditor = editor;\n          if (typeof _maybeHistoryEditor.undo === 'function') {\n            _maybeHistoryEditor.undo();\n          }\n          return;\n        }\n        // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n        if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n        if (Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n        if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n        if (Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        }\n        // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n        if (Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: !isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: isRTL ? 'end' : 'start'\n            });\n          }\n          return;\n        }\n        if (Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: isRTL ? 'start' : 'end'\n            });\n          }\n          return;\n        }\n        if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: !isRTL\n          });\n          return;\n        }\n        if (Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: isRTL\n          });\n          return;\n        }\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n        if (!HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n          if (Hotkeys.isSoftBreak(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertSoftBreak(editor);\n            return;\n          }\n          if (Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertBreak(editor);\n            return;\n          }\n          if (Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor);\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor);\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n        } else {\n          if (IS_CHROME || IS_WEBKIT) {\n            // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n            // an event when deleting backwards in a selected void inline node\n            if (selection && (Hotkeys.isDeleteBackward(nativeEvent) || Hotkeys.isDeleteForward(nativeEvent)) && Range.isCollapsed(selection)) {\n              var currentNode = Node.parent(editor, selection.anchor.path);\n              if (Element$1.isElement(currentNode) && Editor.isVoid(editor, currentNode) && (Editor.isInline(editor, currentNode) || Editor.isBlock(editor, currentNode))) {\n                event.preventDefault();\n                Editor.deleteBackward(editor, {\n                  unit: 'block'\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onKeyDown]),\n    onPaste: useCallback(event => {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to React's `onPaste` here instead.\n        // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n        // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n        // COMPAT: Safari InputEvents generated by pasting won't include\n        // application/x-slate-fragment items, so use the\n        // ClipboardEvent here. (2023/03/15)\n        if (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent) || IS_WEBKIT) {\n          event.preventDefault();\n          ReactEditor.insertData(editor, event.clipboardData);\n        }\n      }\n    }, [readOnly, editor, attributes.onPaste])\n  }), /*#__PURE__*/React.createElement(Children, {\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  }))))));\n});\n/**\n * The default placeholder element\n */\nvar DefaultPlaceholder = _ref2 => {\n  var {\n    attributes,\n    children\n  } = _ref2;\n  return (/*#__PURE__*/\n    // COMPAT: Artificially add a line-break to the end on the placeholder element\n    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n    React.createElement(\"span\", _objectSpread({}, attributes), children, IS_ANDROID && /*#__PURE__*/React.createElement(\"br\", null))\n  );\n};\n/**\n * A default memoized decorate function.\n */\nvar defaultDecorate = () => [];\n/**\n * A default implement to scroll dom range into view.\n */\nvar defaultScrollSelectionIntoView = (editor, domRange) => {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && Range.isCollapsed(editor.selection))) {\n    var leafEl = domRange.startContainer.parentElement;\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n    scrollIntoView(leafEl, {\n      scrollMode: 'if-needed'\n    });\n    // @ts-expect-error an unorthodox delete D:\n    delete leafEl.getBoundingClientRect;\n  }\n};\n/**\n * Check if an event is overrided by a handler.\n */\nvar isEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\n * Check if the event's target is an input element\n */\nvar isDOMEventTargetInput = event => {\n  return isDOMNode(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);\n};\n/**\n * Check if a DOM event is overrided by a handler.\n */\nvar isDOMEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.defaultPrevented;\n};\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\nvar FocusedContext = /*#__PURE__*/createContext(false);\n/**\n * Get the current `focused` state of the editor.\n */\nvar useFocused = () => {\n  return useContext(FocusedContext);\n};\nfunction isError(error) {\n  return error instanceof Error;\n}\n/**\n * A React context for sharing the editor selector context in a way to control rerenders\n */\nvar SlateSelectorContext = /*#__PURE__*/createContext({});\nvar refEquality = (a, b) => a === b;\n/**\n * use redux style selectors to prevent rerendering on every keystroke.\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\n *\n * Example:\n * ```\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\n * ```\n */\nfunction useSlateSelector(selector) {\n  var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n  var [, forceRender] = useReducer(s => s + 1, 0);\n  var context = useContext(SlateSelectorContext);\n  if (!context) {\n    throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n  }\n  var {\n    getSlate,\n    addEventListener\n  } = context;\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef(() => null);\n  var latestSelectedState = useRef(null);\n  var selectedState;\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(getSlate());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n    }\n    throw err;\n  }\n  useIsomorphicLayoutEffect(() => {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(() => {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(getSlate());\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        if (err instanceof Error) {\n          latestSubscriptionCallbackError.current = err;\n        } else {\n          latestSubscriptionCallbackError.current = new Error(String(err));\n        }\n      }\n      forceRender();\n    }\n    var unsubscribe = addEventListener(checkForUpdates);\n    checkForUpdates();\n    return () => unsubscribe();\n  },\n  // don't rerender on equalityFn change since we want to be able to define it inline\n  [addEventListener, getSlate]);\n  return selectedState;\n}\n/**\n * Create selector context with editor updating on every editor change\n */\nfunction useSelectorContext(editor) {\n  var eventListeners = useRef([]).current;\n  var slateRef = useRef({\n    editor\n  }).current;\n  var onChange = useCallback(editor => {\n    slateRef.editor = editor;\n    eventListeners.forEach(listener => listener(editor));\n  }, [eventListeners, slateRef]);\n  var selectorContext = useMemo(() => {\n    return {\n      getSlate: () => slateRef.editor,\n      addEventListener: callback => {\n        eventListeners.push(callback);\n        return () => {\n          eventListeners.splice(eventListeners.indexOf(callback), 1);\n        };\n      }\n    };\n  }, [eventListeners, slateRef]);\n  return {\n    selectorContext,\n    onChange\n  };\n}\nvar REACT_MAJOR_VERSION = parseInt(React.version.split('.')[0], 10);\nvar _excluded = [\"editor\", \"children\", \"onChange\", \"onSelectionChange\", \"onValueChange\", \"initialValue\"];\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\nvar Slate = props => {\n  var {\n      editor,\n      children,\n      onChange,\n      onSelectionChange,\n      onValueChange,\n      initialValue\n    } = props,\n    rest = _objectWithoutProperties(props, _excluded);\n  var [context, setContext] = React.useState(() => {\n    if (!Node.isNodeList(initialValue)) {\n      throw new Error(\"[Slate] initialValue is invalid! Expected a list of elements but got: \".concat(Scrubber.stringify(initialValue)));\n    }\n    if (!Editor.isEditor(editor)) {\n      throw new Error(\"[Slate] editor is invalid! You passed: \".concat(Scrubber.stringify(editor)));\n    }\n    editor.children = initialValue;\n    Object.assign(editor, rest);\n    return {\n      v: 0,\n      editor\n    };\n  });\n  var {\n    selectorContext,\n    onChange: handleSelectorChange\n  } = useSelectorContext(editor);\n  var onContextChange = useCallback(options => {\n    var _options$operation;\n    if (onChange) {\n      onChange(editor.children);\n    }\n    switch (options === null || options === void 0 || (_options$operation = options.operation) === null || _options$operation === void 0 ? void 0 : _options$operation.type) {\n      case 'set_selection':\n        onSelectionChange === null || onSelectionChange === void 0 || onSelectionChange(editor.selection);\n        break;\n      default:\n        onValueChange === null || onValueChange === void 0 || onValueChange(editor.children);\n    }\n    setContext(prevContext => ({\n      v: prevContext.v + 1,\n      editor\n    }));\n    handleSelectorChange(editor);\n  }, [editor, handleSelectorChange, onChange, onSelectionChange, onValueChange]);\n  useEffect(() => {\n    EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {});\n    };\n  }, [editor, onContextChange]);\n  var [isFocused, setIsFocused] = useState(ReactEditor.isFocused(editor));\n  useEffect(() => {\n    setIsFocused(ReactEditor.isFocused(editor));\n  }, [editor]);\n  useIsomorphicLayoutEffect(() => {\n    var fn = () => setIsFocused(ReactEditor.isFocused(editor));\n    if (REACT_MAJOR_VERSION >= 17) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn);\n      document.addEventListener('focusout', fn);\n      return () => {\n        document.removeEventListener('focusin', fn);\n        document.removeEventListener('focusout', fn);\n      };\n    } else {\n      document.addEventListener('focus', fn, true);\n      document.addEventListener('blur', fn, true);\n      return () => {\n        document.removeEventListener('focus', fn, true);\n        document.removeEventListener('blur', fn, true);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(SlateSelectorContext.Provider, {\n    value: selectorContext\n  }, /*#__PURE__*/React.createElement(SlateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EditorContext.Provider, {\n    value: context.editor\n  }, /*#__PURE__*/React.createElement(FocusedContext.Provider, {\n    value: isFocused\n  }, children))));\n};\n\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */\nvar useEditor = () => {\n  var editor = useContext(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n/**\n * Get the current slate selection.\n * Only triggers a rerender when the selection actually changes\n */\nvar useSlateSelection = () => {\n  return useSlateSelector(editor => editor.selection, isSelectionEqual);\n};\nvar isSelectionEqual = (a, b) => {\n  if (!a && !b) return true;\n  if (!a || !b) return false;\n  return Range.equals(a, b);\n};\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\nvar withReact = function withReact(editor) {\n  var clipboardFormatKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x-slate-fragment';\n  var e = editor;\n  e = withDOM(e, clipboardFormatKey);\n  var {\n    onChange\n  } = e;\n  e.onChange = options => {\n    // COMPAT: React < 18 doesn't batch `setState` hook calls, which means\n    // that the children and selection can get out of sync for one render\n    // pass. So we have to use this unstable API to ensure it batches them.\n    // (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? ReactDOM.unstable_batchedUpdates : callback => callback();\n    maybeBatchUpdates(() => {\n      onChange(options);\n    });\n  };\n  return e;\n};\nexport { DefaultElement, DefaultLeaf, DefaultPlaceholder, Editable, ReactEditor, Slate, useComposing, useEditor, useFocused, useReadOnly, useSelected, useSlate, useSlateSelection, useSlateSelector, useSlateStatic, useSlateWithV, withReact };","map":{"version":3,"names":["_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","key","i","length","indexOf","_objectWithoutProperties","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","_typeof","o","Symbol","iterator","constructor","_toPrimitive","input","hint","prim","toPrimitive","undefined","res","TypeError","String","Number","_toPropertyKey","arg","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","EditorContext","createContext","useSlateStatic","editor","useContext","Error","ReactEditor","DOMEditor","RESOLVE_DELAY","FLUSH_DELAY","debug","isDataTransfer","name","createAndroidInputManager","_ref","scheduleOnDOMSelectionChange","onDOMSelectionChange","flushing","compositionEndTimeoutId","flushTimeoutId","actionTimeoutId","idCounter","insertPositionHint","applyPendingSelection","pendingSelection","EDITOR_TO_PENDING_SELECTION","get","delete","selection","normalized","normalizeRange","Range","equals","Transforms","select","performAction","action","EDITOR_TO_PENDING_ACTION","at","Point","isPoint","normalizePoint","_targetRange","Editor","range","run","flush","clearTimeout","hasPendingDiffs","hasPendingAction","setTimeout","selectionRef","rangeRef","affinity","EDITOR_TO_USER_MARKS","set","marks","EDITOR_TO_PENDING_DIFFS","scheduleSelectionChange","diff","_EDITOR_TO_PENDING_DI","_EDITOR_TO_PENDING_DI2","pendingMarks","EDITOR_TO_PENDING_INSERTION_MARKS","targetRange","text","insertText","deleteFragment","filter","_ref2","id","verifyDiffState","cancel","unref","userMarks","onChange","handleCompositionEnd","_event","IS_COMPOSING","handleCompositionStart","updatePlaceholderVisibility","forceHide","arguments","placeholderElement","EDITOR_TO_PLACEHOLDER_ELEMENT","style","display","removeProperty","storeDiff","path","_EDITOR_TO_PENDING_DI3","pendingDiffs","Node","leaf","idx","findIndex","change","Path","normalizeStringDiff","push","merged","mergeStringDiffs","splice","_objectSpread$5","scheduleAction","handleDOMBeforeInput","event","_targetRange2","IS_NODE_MAP_DIRTY","inputType","type","data","dataTransfer","nativeTargetRange","getTargetRanges","toSlateRange","exactMatch","suppressThrow","window","getWindow","domSelection","getSelection","canStoreDiff","startsWith","isExpanded","_start","_end","edges","_leaf","offset","next","match","Text$1","isText","anchor","focus","direction","endsWith","start","end","relevantPendingDiffs","find","diffs","applyStringDiff","point","handleUserSelect","isCollapsed","targetNode","deleteForward","_nativeTargetRange","_anchor","nativeCollapsed","isDOMSelection","collapsed","deleteBackward","unit","insertSoftBreak","insertBreak","insertData","_text","replace","test","slice","includes","parts","split","forEach","line","_start2","_end2","_diff","hintPosition","search","diffPosition","scheduleFlush","_EDITOR_TO_PENDING_DI4","hasPendingChanges","isFlushing","pathChanged","parentPathChanged","handleInput","handleKeyDown","_","handleDomMutations","mutations","some","mutation","isTrackedMutation","_EDITOR_TO_FORCE_REND","EDITOR_TO_FORCE_RENDER","useIsMounted","isMountedRef","useRef","useEffect","current","useIsomorphicLayoutEffect","CAN_USE_DOM","useLayoutEffect","useMutationObserver","node","callback","options","mutationObserver","useState","MutationObserver","takeRecords","observe","disconnect","MUTATION_OBSERVER_CONFIG$1","subtree","childList","characterData","useAndroidInputManager","IS_ANDROID","_excluded$2","isMounted","inputManager","_objectSpread$4","EDITOR_TO_SCHEDULE_FLUSH","String$1","props","isLast","parent","findPath","parentPath","isMarkPlaceholder","Boolean","MARK_PLACEHOLDER_SYMBOL","isVoid","React","createElement","ZeroWidthString","string","children","isInline","isLineBreak","TextString","isTrailing","ref","getTextContent","concat","initialText","textWithTrailing","textContent","MemoizedText$1","memo","forwardRef","attributes","_objectSpread$3","IS_IOS","PLACEHOLDER_DELAY","disconnectPlaceholderResizeObserver","placeholderResizeObserver","releaseObserver","clearTimeoutRef","timeoutRef","Leaf","renderPlaceholder","renderLeaf","DefaultLeaf","_objectSpread$2","placeholderRef","showPlaceholder","setShowPlaceholder","showPlaceholderTimeoutRef","callbackPlaceholderRef","useCallback","placeholderEl","_leaf$onPlaceholderRe","onPlaceholderResize","ResizeObserver$1","ResizeObserver","_leaf$onPlaceholderRe2","leafIsPlaceholder","PLACEHOLDER_SYMBOL","placeholderProps","placeholder","position","top","pointerEvents","width","maxWidth","opacity","userSelect","textDecoration","WebkitUserModify","IS_WEBKIT","contentEditable","Fragment","MemoizedLeaf","prev","Text","decorations","leaves","findKey","callbackRef","span","KEY_TO_ELEMENT","EDITOR_TO_KEY_TO_ELEMENT","NODE_TO_ELEMENT","ELEMENT_TO_NODE","MemoizedText","isTextDecorationsEqual","Element","element","renderElement","p","DefaultElement","_objectSpread$1","readOnly","useReadOnly","useChildren","hasInlines","dir","getDirection","Tag","texts","height","color","outline","NODE_TO_INDEX","NODE_TO_PARENT","MemoizedElement","isElementDecorationsEqual","DecorateContext","useDecorate","SelectedContext","useSelected","decorate","isLeafBlock","Element$1","isElement","n","sel","intersection","ds","dec","d","Provider","ReadOnlyContext","SlateContext","useSlate","context","useSlateWithV","useTrackUserInput","receivedUserInput","animationFrameIdRef","onUserInput","cancelAnimationFrame","requestAnimationFrame","createRestoreDomManager","bufferedMutations","clear","registerMutations","trackedMutations","restoreDOM","reverse","removedNodes","insertBefore","nextSibling","addedNodes","removeChild","MUTATION_OBSERVER_CONFIG","characterDataOldValue","RestoreDOMComponent","Component","_this$mutationObserve","componentDidMount","manager","getSnapshotBeforeUpdate","_this$mutationObserve2","_this$mutationObserve3","_this$manager2","pendingMutations","_this$manager","componentDidUpdate","_this$manager3","componentWillUnmount","_this$mutationObserve4","render","RestoreDOM","ComposingContext","useComposing","Children","Editable","forwardedRef","defaultRenderPlaceholder","DefaultPlaceholder","_objectSpread","autoFocus","defaultDecorate","onDOMBeforeInput","propsOnDOMBeforeInput","scrollSelectionIntoView","defaultScrollSelectionIntoView","userStyle","as","disableDefaultStyles","_excluded$1","isComposing","setIsComposing","deferredOperations","placeholderHeight","setPlaceholderHeight","processing","forceRender","useReducer","s","IS_READ_ONLY","state","useMemo","isDraggingInternally","isUpdatingSelection","latestElement","hasMarkPlaceholder","androidInputManagerRef","throttle","el","toDOMNode","root","getRootNode","ShadowRoot","active","getActiveElement","document","execCommand","deselect","androidInputManager","_root","findDocumentOrShadowRoot","activeElement","_el","IS_FOCUSED","anchorNode","focusNode","anchorNodeSelectable","hasEditableTarget","isTargetInsideNonReadonlyVoid","focusNodeInEditor","hasTarget","debounce","_androidInputManagerR","_androidInputManagerR2","getDefaultView","EDITOR_TO_WINDOW","EDITOR_TO_ELEMENT","isFocused","setDomSelection","forceChange","hasDomSelection","IS_FIREFOX","rangeCount","firstRange","getRangeAt","lastRange","startContainer","endContainer","editorElement","hasDomSelectionInEditor","contains","slateRange","_anchorNode","parentElement","hasAttribute","hasRange","newDomRange","toDOMRange","e","collapseToEnd","isBackward","setBaseAndExtent","endOffset","startOffset","removeAllRanges","ensureSelection","timeoutId","animationFrameId","ensureDomSelection","ranges","newRange","setStart","setEnd","preventDefault","stopImmediatePropagation","isDOMEventHandled","_EDITOR_TO_USER_SELEC","isCompositionChange","native","_node$parentElement","_window$getComputedSt","toDOMPoint","closest","_window","hasDOMNode","_lastText$textContent","lastText","createTreeWalker","NodeFilter","SHOW_TEXT","lastChild","getComputedStyle","whiteSpace","block","above","isBlock","_range","EDITOR_TO_USER_SELECTION","toRestore","HAS_BEFORE_INPUT_SUPPORT","removeEventListener","addEventListener","onSelectionChange","targetElement","HTMLElement","targetTagName","tagName","stoppedDragging","Array","from","placeHolderResizeHandler","_placeholderEl$getBou","getBoundingClientRect","rest","_excluded2","loose","unset","fromEntries","map","mark","role","spellCheck","autoCorrect","autoCapitalize","zindex","suppressContentEditableWarning","wordWrap","minHeight","onBeforeInput","isEventHandled","hasSelectableTarget","_text2","onInput","op","nativeEvent","maybeHistoryEditor","undo","redo","onBlur","relatedTarget","isDOMElement","isDOMNode","toSlateNode","onClick","hasPath","detail","TRIPLE_CLICK","blockPath","_block$","startVoid","void","endVoid","_range2","onCompositionEnd","_androidInputManagerR3","Promise","resolve","then","IS_FIREFOX_LEGACY","IS_WECHATBROWSER","IS_UC_MOBILE","placeholderMarks","onCompositionUpdate","onCompositionStart","_androidInputManagerR4","onCopy","isDOMEventTargetInput","setFragmentData","clipboardData","onCut","onDragOver","onDragStart","voidMatch","voids","onDrop","draggedRange","findEventRange","onDragEnd","onFocus","onKeyDown","_androidInputManagerR5","isRTL","Hotkeys","isRedo","isUndo","_maybeHistoryEditor","isMoveLineBackward","move","isMoveLineForward","isExtendLineBackward","edge","isExtendLineForward","isMoveBackward","collapse","isMoveForward","isMoveWordBackward","isMoveWordForward","isBold","isItalic","isTransposeCharacter","isSoftBreak","isSplitBlock","isDeleteBackward","isDeleteForward","isDeleteLineBackward","isDeleteLineForward","isDeleteWordBackward","isDeleteWordForward","IS_CHROME","currentNode","onPaste","isPlainTextOnlyPaste","domRange","leafEl","bind","scrollIntoView","scrollMode","handler","shouldTreatEventAsHandled","isDefaultPrevented","isPropagationStopped","HTMLInputElement","HTMLTextAreaElement","defaultPrevented","FocusedContext","useFocused","isError","error","SlateSelectorContext","refEquality","a","b","useSlateSelector","selector","equalityFn","getSlate","latestSubscriptionCallbackError","latestSelector","latestSelectedState","selectedState","err","message","stack","checkForUpdates","newSelectedState","unsubscribe","useSelectorContext","eventListeners","slateRef","listener","selectorContext","REACT_MAJOR_VERSION","parseInt","version","Slate","onValueChange","initialValue","_excluded","setContext","isNodeList","Scrubber","stringify","isEditor","assign","v","handleSelectorChange","onContextChange","_options$operation","operation","prevContext","EDITOR_TO_ON_CHANGE","setIsFocused","fn","useEditor","useSlateSelection","isSelectionEqual","withReact","clipboardFormatKey","withDOM","maybeBatchUpdates","ReactDOM","unstable_batchedUpdates"],"sources":["C:\\.yarn\\berry\\cache\\@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip\\node_modules\\@babel\\runtime\\helpers\\esm\\objectWithoutPropertiesLoose.js","C:\\.yarn\\berry\\cache\\@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip\\node_modules\\@babel\\runtime\\helpers\\esm\\objectWithoutProperties.js","C:\\.yarn\\berry\\cache\\@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip\\node_modules\\@babel\\runtime\\helpers\\esm\\typeof.js","C:\\.yarn\\berry\\cache\\@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip\\node_modules\\@babel\\runtime\\helpers\\esm\\toPrimitive.js","C:\\.yarn\\berry\\cache\\@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip\\node_modules\\@babel\\runtime\\helpers\\esm\\toPropertyKey.js","C:\\.yarn\\berry\\cache\\@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip\\node_modules\\@babel\\runtime\\helpers\\esm\\defineProperty.js","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-slate-static.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\plugin\\react-editor.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\android-input-manager\\android-input-manager.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-is-mounted.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-isomorphic-layout-effect.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-mutation-observer.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\android-input-manager\\use-android-input-manager.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\components\\string.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\components\\leaf.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\components\\text.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\components\\element.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-decorate.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-selected.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-children.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-read-only.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-slate.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-track-user-input.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\components\\restore-dom\\restore-dom-manager.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\components\\restore-dom\\restore-dom.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-composing.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\components\\editable.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-focused.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-slate-selector.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\utils\\environment.ts","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\components\\slate.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-editor.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\hooks\\use-slate-selection.tsx","C:\\ApnaCollege\\React_Basic_Projects\\client\\node_modules\\slate-react\\src\\plugin\\with-react.ts"],"sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import { createContext, useContext } from 'react'\nimport { Editor } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const EditorContext = createContext<ReactEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlateStatic = (): Editor => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useSlateStatic\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","import { DOMEditor, type DOMEditorInterface } from 'slate-dom'\n\n/**\n * A React and DOM-specific version of the `Editor` interface.\n */\n\nexport interface ReactEditor extends DOMEditor {}\n\nexport interface ReactEditorInterface extends DOMEditorInterface {}\n\n// eslint-disable-next-line no-redeclare\nexport const ReactEditor: ReactEditorInterface = DOMEditor\n","import { DebouncedFunc } from 'lodash'\nimport { Editor, Node, Path, Point, Range, Text, Transforms } from 'slate'\nimport { ReactEditor } from '../../plugin/react-editor'\nimport {\n  applyStringDiff,\n  mergeStringDiffs,\n  normalizePoint,\n  normalizeRange,\n  normalizeStringDiff,\n  StringDiff,\n  targetRange,\n  TextDiff,\n  verifyDiffState,\n} from 'slate-dom'\nimport { isDOMSelection, isTrackedMutation } from 'slate-dom'\nimport {\n  EDITOR_TO_FORCE_RENDER,\n  EDITOR_TO_PENDING_ACTION,\n  EDITOR_TO_PENDING_DIFFS,\n  EDITOR_TO_PENDING_INSERTION_MARKS,\n  EDITOR_TO_PENDING_SELECTION,\n  EDITOR_TO_PLACEHOLDER_ELEMENT,\n  EDITOR_TO_USER_MARKS,\n  IS_COMPOSING,\n  IS_NODE_MAP_DIRTY,\n} from 'slate-dom'\n\nexport type Action = { at?: Point | Range; run: () => void }\n\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nconst RESOLVE_DELAY = 25\n\n// Time with no user interaction before the current user action is considered as done.\nconst FLUSH_DELAY = 200\n\n// Replace with `const debug = console.log` to debug\nconst debug = (..._: unknown[]) => {}\n\n// Type guard to check if a value is a DataTransfer\nconst isDataTransfer = (value: any): value is DataTransfer =>\n  value?.constructor.name === 'DataTransfer'\n\nexport type CreateAndroidInputManagerOptions = {\n  editor: ReactEditor\n\n  scheduleOnDOMSelectionChange: DebouncedFunc<() => void>\n  onDOMSelectionChange: DebouncedFunc<() => void>\n}\n\nexport type AndroidInputManager = {\n  flush: () => void\n  scheduleFlush: () => void\n\n  hasPendingDiffs: () => boolean\n  hasPendingAction: () => boolean\n  hasPendingChanges: () => boolean\n  isFlushing: () => boolean | 'action'\n\n  handleUserSelect: (range: Range | null) => void\n  handleCompositionEnd: (event: React.CompositionEvent<HTMLDivElement>) => void\n  handleCompositionStart: (\n    event: React.CompositionEvent<HTMLDivElement>\n  ) => void\n  handleDOMBeforeInput: (event: InputEvent) => void\n  handleKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => void\n\n  handleDomMutations: (mutations: MutationRecord[]) => void\n  handleInput: () => void\n}\n\nexport function createAndroidInputManager({\n  editor,\n  scheduleOnDOMSelectionChange,\n  onDOMSelectionChange,\n}: CreateAndroidInputManagerOptions): AndroidInputManager {\n  let flushing: 'action' | boolean = false\n  let compositionEndTimeoutId: ReturnType<typeof setTimeout> | null = null\n  let flushTimeoutId: ReturnType<typeof setTimeout> | null = null\n  let actionTimeoutId: ReturnType<typeof setTimeout> | null = null\n\n  let idCounter = 0\n  let insertPositionHint: StringDiff | null | false = false\n\n  const applyPendingSelection = () => {\n    const pendingSelection = EDITOR_TO_PENDING_SELECTION.get(editor)\n    EDITOR_TO_PENDING_SELECTION.delete(editor)\n\n    if (pendingSelection) {\n      const { selection } = editor\n      const normalized = normalizeRange(editor, pendingSelection)\n\n      debug('apply pending selection', pendingSelection, normalized)\n\n      if (normalized && (!selection || !Range.equals(normalized, selection))) {\n        Transforms.select(editor, normalized)\n      }\n    }\n  }\n\n  const performAction = () => {\n    const action = EDITOR_TO_PENDING_ACTION.get(editor)\n    EDITOR_TO_PENDING_ACTION.delete(editor)\n    if (!action) {\n      return\n    }\n\n    if (action.at) {\n      const target = Point.isPoint(action.at)\n        ? normalizePoint(editor, action.at)\n        : normalizeRange(editor, action.at)\n\n      if (!target) {\n        return\n      }\n\n      const targetRange = Editor.range(editor, target)\n      if (!editor.selection || !Range.equals(editor.selection, targetRange)) {\n        Transforms.select(editor, target)\n      }\n    }\n\n    action.run()\n  }\n\n  const flush = () => {\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId)\n      flushTimeoutId = null\n    }\n\n    if (actionTimeoutId) {\n      clearTimeout(actionTimeoutId)\n      actionTimeoutId = null\n    }\n\n    if (!hasPendingDiffs() && !hasPendingAction()) {\n      applyPendingSelection()\n      return\n    }\n\n    if (!flushing) {\n      flushing = true\n      setTimeout(() => (flushing = false))\n    }\n\n    if (hasPendingAction()) {\n      flushing = 'action'\n    }\n\n    const selectionRef =\n      editor.selection &&\n      Editor.rangeRef(editor, editor.selection, { affinity: 'forward' })\n    EDITOR_TO_USER_MARKS.set(editor, editor.marks)\n\n    debug(\n      'flush',\n      EDITOR_TO_PENDING_ACTION.get(editor),\n      EDITOR_TO_PENDING_DIFFS.get(editor)\n    )\n\n    let scheduleSelectionChange = hasPendingDiffs()\n\n    let diff: TextDiff | undefined\n    while ((diff = EDITOR_TO_PENDING_DIFFS.get(editor)?.[0])) {\n      const pendingMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)\n\n      if (pendingMarks !== undefined) {\n        EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor)\n        editor.marks = pendingMarks\n      }\n\n      if (pendingMarks && insertPositionHint === false) {\n        insertPositionHint = null\n        debug('insert after mark placeholder')\n      }\n\n      const range = targetRange(diff)\n      if (!editor.selection || !Range.equals(editor.selection, range)) {\n        Transforms.select(editor, range)\n      }\n\n      if (diff.diff.text) {\n        Editor.insertText(editor, diff.diff.text)\n      } else {\n        Editor.deleteFragment(editor)\n      }\n\n      // Remove diff only after we have applied it to account for it when transforming\n      // pending ranges.\n      EDITOR_TO_PENDING_DIFFS.set(\n        editor,\n        EDITOR_TO_PENDING_DIFFS.get(editor)?.filter(\n          ({ id }) => id !== diff!.id\n        )!\n      )\n\n      if (!verifyDiffState(editor, diff)) {\n        debug('invalid diff state')\n        scheduleSelectionChange = false\n        EDITOR_TO_PENDING_ACTION.delete(editor)\n        EDITOR_TO_USER_MARKS.delete(editor)\n        flushing = 'action'\n\n        // Ensure we don't restore the pending user (dom) selection\n        // since the document and dom state do not match.\n        EDITOR_TO_PENDING_SELECTION.delete(editor)\n        scheduleOnDOMSelectionChange.cancel()\n        onDOMSelectionChange.cancel()\n        selectionRef?.unref()\n      }\n    }\n\n    const selection = selectionRef?.unref()\n    if (\n      selection &&\n      !EDITOR_TO_PENDING_SELECTION.get(editor) &&\n      (!editor.selection || !Range.equals(selection, editor.selection))\n    ) {\n      Transforms.select(editor, selection)\n    }\n\n    if (hasPendingAction()) {\n      performAction()\n      return\n    }\n\n    // COMPAT: The selectionChange event is fired after the action is performed,\n    // so we have to manually schedule it to ensure we don't 'throw away' the selection\n    // while rendering if we have pending changes.\n    if (scheduleSelectionChange) {\n      debug('scheduleOnDOMSelectionChange pending changes')\n      scheduleOnDOMSelectionChange()\n    }\n\n    scheduleOnDOMSelectionChange.flush()\n    onDOMSelectionChange.flush()\n\n    applyPendingSelection()\n\n    const userMarks = EDITOR_TO_USER_MARKS.get(editor)\n    EDITOR_TO_USER_MARKS.delete(editor)\n    if (userMarks !== undefined) {\n      editor.marks = userMarks\n      editor.onChange()\n    }\n  }\n\n  const handleCompositionEnd = (\n    _event: React.CompositionEvent<HTMLDivElement>\n  ) => {\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId)\n    }\n\n    compositionEndTimeoutId = setTimeout(() => {\n      IS_COMPOSING.set(editor, false)\n      flush()\n    }, RESOLVE_DELAY)\n  }\n\n  const handleCompositionStart = (\n    _event: React.CompositionEvent<HTMLDivElement>\n  ) => {\n    debug('composition start')\n\n    IS_COMPOSING.set(editor, true)\n\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId)\n      compositionEndTimeoutId = null\n    }\n  }\n\n  const updatePlaceholderVisibility = (forceHide = false) => {\n    const placeholderElement = EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor)\n    if (!placeholderElement) {\n      return\n    }\n\n    if (hasPendingDiffs() || forceHide) {\n      placeholderElement.style.display = 'none'\n      return\n    }\n\n    placeholderElement.style.removeProperty('display')\n  }\n\n  const storeDiff = (path: Path, diff: StringDiff) => {\n    debug('storeDiff', path, diff)\n\n    const pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor) ?? []\n    EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs)\n\n    const target = Node.leaf(editor, path)\n    const idx = pendingDiffs.findIndex(change => Path.equals(change.path, path))\n    if (idx < 0) {\n      const normalized = normalizeStringDiff(target.text, diff)\n      if (normalized) {\n        pendingDiffs.push({ path, diff, id: idCounter++ })\n      }\n\n      updatePlaceholderVisibility()\n      return\n    }\n\n    const merged = mergeStringDiffs(target.text, pendingDiffs[idx].diff, diff)\n    if (!merged) {\n      pendingDiffs.splice(idx, 1)\n      updatePlaceholderVisibility()\n      return\n    }\n\n    pendingDiffs[idx] = {\n      ...pendingDiffs[idx],\n      diff: merged,\n    }\n  }\n\n  const scheduleAction = (\n    run: () => void,\n    { at }: { at?: Point | Range } = {}\n  ): void => {\n    insertPositionHint = false\n    debug('scheduleAction', { at, run })\n\n    EDITOR_TO_PENDING_SELECTION.delete(editor)\n    scheduleOnDOMSelectionChange.cancel()\n    onDOMSelectionChange.cancel()\n\n    if (hasPendingAction()) {\n      flush()\n    }\n\n    EDITOR_TO_PENDING_ACTION.set(editor, { at, run })\n\n    // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n    // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n    // in this case and thus never actually perform the action.\n    actionTimeoutId = setTimeout(flush)\n  }\n\n  const handleDOMBeforeInput = (event: InputEvent): void => {\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId)\n      flushTimeoutId = null\n    }\n\n    if (IS_NODE_MAP_DIRTY.get(editor)) {\n      return\n    }\n\n    const { inputType: type } = event\n    let targetRange: Range | null = null\n    const data: DataTransfer | string | undefined =\n      (event as any).dataTransfer || event.data || undefined\n\n    if (\n      insertPositionHint !== false &&\n      type !== 'insertText' &&\n      type !== 'insertCompositionText'\n    ) {\n      insertPositionHint = false\n    }\n\n    let [nativeTargetRange] = (event as any).getTargetRanges()\n    if (nativeTargetRange) {\n      targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n        exactMatch: false,\n        suppressThrow: true,\n      })\n    }\n\n    // COMPAT: SelectionChange event is fired after the action is performed, so we\n    // have to manually get the selection here to ensure it's up-to-date.\n    const window = ReactEditor.getWindow(editor)\n    const domSelection = window.getSelection()\n    if (!targetRange && domSelection) {\n      nativeTargetRange = domSelection\n      targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: true,\n      })\n    }\n\n    targetRange = targetRange ?? editor.selection\n    if (!targetRange) {\n      return\n    }\n\n    // By default, the input manager tries to store text diffs so that we can\n    // defer flushing them at a later point in time. We don't want to flush\n    // for every input event as this can be expensive. However, there are some\n    // scenarios where we cannot safely store the text diff and must instead\n    // schedule an action to let Slate normalize the editor state.\n    let canStoreDiff = true\n\n    if (type.startsWith('delete')) {\n      if (Range.isExpanded(targetRange)) {\n        const [start, end] = Range.edges(targetRange)\n        const leaf = Node.leaf(editor, start.path)\n\n        if (leaf.text.length === start.offset && end.offset === 0) {\n          const next = Editor.next(editor, {\n            at: start.path,\n            match: Text.isText,\n          })\n          if (next && Path.equals(next[1], end.path)) {\n            targetRange = { anchor: end, focus: end }\n          }\n        }\n      }\n\n      const direction = type.endsWith('Backward') ? 'backward' : 'forward'\n      const [start, end] = Range.edges(targetRange)\n      const [leaf, path] = Editor.leaf(editor, start.path)\n\n      const diff = {\n        text: '',\n        start: start.offset,\n        end: end.offset,\n      }\n      const pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor)\n      const relevantPendingDiffs = pendingDiffs?.find(change =>\n        Path.equals(change.path, path)\n      )\n      const diffs = relevantPendingDiffs\n        ? [relevantPendingDiffs.diff, diff]\n        : [diff]\n      const text = applyStringDiff(leaf.text, ...diffs)\n\n      if (text.length === 0) {\n        // Text leaf will be removed, so we need to schedule an\n        // action to remove it so that Slate can normalize instead\n        // of storing as a diff\n        canStoreDiff = false\n      }\n\n      if (Range.isExpanded(targetRange)) {\n        if (\n          canStoreDiff &&\n          Path.equals(targetRange.anchor.path, targetRange.focus.path)\n        ) {\n          const point = { path: targetRange.anchor.path, offset: start.offset }\n          const range = Editor.range(editor, point, point)\n          handleUserSelect(range)\n\n          return storeDiff(targetRange.anchor.path, {\n            text: '',\n            end: end.offset,\n            start: start.offset,\n          })\n        }\n\n        return scheduleAction(\n          () => Editor.deleteFragment(editor, { direction }),\n          { at: targetRange }\n        )\n      }\n    }\n\n    switch (type) {\n      case 'deleteByComposition':\n      case 'deleteByCut':\n      case 'deleteByDrag': {\n        return scheduleAction(() => Editor.deleteFragment(editor), {\n          at: targetRange,\n        })\n      }\n\n      case 'deleteContent':\n      case 'deleteContentForward': {\n        const { anchor } = targetRange\n        if (canStoreDiff && Range.isCollapsed(targetRange)) {\n          const targetNode = Node.leaf(editor, anchor.path)\n\n          if (anchor.offset < targetNode.text.length) {\n            return storeDiff(anchor.path, {\n              text: '',\n              start: anchor.offset,\n              end: anchor.offset + 1,\n            })\n          }\n        }\n\n        return scheduleAction(() => Editor.deleteForward(editor), {\n          at: targetRange,\n        })\n      }\n\n      case 'deleteContentBackward': {\n        const { anchor } = targetRange\n\n        // If we have a mismatch between the native and slate selection being collapsed\n        // we are most likely deleting a zero-width placeholder and thus should perform it\n        // as an action to ensure correct behavior (mostly happens with mark placeholders)\n        const nativeCollapsed = isDOMSelection(nativeTargetRange)\n          ? nativeTargetRange.isCollapsed\n          : !!nativeTargetRange?.collapsed\n\n        if (\n          canStoreDiff &&\n          nativeCollapsed &&\n          Range.isCollapsed(targetRange) &&\n          anchor.offset > 0\n        ) {\n          return storeDiff(anchor.path, {\n            text: '',\n            start: anchor.offset - 1,\n            end: anchor.offset,\n          })\n        }\n\n        return scheduleAction(() => Editor.deleteBackward(editor), {\n          at: targetRange,\n        })\n      }\n\n      case 'deleteEntireSoftLine': {\n        return scheduleAction(\n          () => {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            Editor.deleteForward(editor, { unit: 'line' })\n          },\n          { at: targetRange }\n        )\n      }\n\n      case 'deleteHardLineBackward': {\n        return scheduleAction(\n          () => Editor.deleteBackward(editor, { unit: 'block' }),\n          { at: targetRange }\n        )\n      }\n\n      case 'deleteSoftLineBackward': {\n        return scheduleAction(\n          () => Editor.deleteBackward(editor, { unit: 'line' }),\n          { at: targetRange }\n        )\n      }\n\n      case 'deleteHardLineForward': {\n        return scheduleAction(\n          () => Editor.deleteForward(editor, { unit: 'block' }),\n          { at: targetRange }\n        )\n      }\n\n      case 'deleteSoftLineForward': {\n        return scheduleAction(\n          () => Editor.deleteForward(editor, { unit: 'line' }),\n          { at: targetRange }\n        )\n      }\n\n      case 'deleteWordBackward': {\n        return scheduleAction(\n          () => Editor.deleteBackward(editor, { unit: 'word' }),\n          { at: targetRange }\n        )\n      }\n\n      case 'deleteWordForward': {\n        return scheduleAction(\n          () => Editor.deleteForward(editor, { unit: 'word' }),\n          { at: targetRange }\n        )\n      }\n\n      case 'insertLineBreak': {\n        return scheduleAction(() => Editor.insertSoftBreak(editor), {\n          at: targetRange,\n        })\n      }\n\n      case 'insertParagraph': {\n        return scheduleAction(() => Editor.insertBreak(editor), {\n          at: targetRange,\n        })\n      }\n      case 'insertCompositionText':\n      case 'deleteCompositionText':\n      case 'insertFromComposition':\n      case 'insertFromDrop':\n      case 'insertFromPaste':\n      case 'insertFromYank':\n      case 'insertReplacementText':\n      case 'insertText': {\n        if (isDataTransfer(data)) {\n          return scheduleAction(() => ReactEditor.insertData(editor, data), {\n            at: targetRange,\n          })\n        }\n\n        let text = data ?? ''\n\n        // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n        // the placeholder itself and thus includes the zero-width space inside edit events.\n        if (EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n          text = text.replace('\\uFEFF', '')\n        }\n\n        // Pastes from the Android clipboard will generate `insertText` events.\n        // If the copied text contains any newlines, Android will append an\n        // extra newline to the end of the copied text.\n        if (type === 'insertText' && /.*\\n.*\\n$/.test(text)) {\n          text = text.slice(0, -1)\n        }\n\n        // If the text includes a newline, split it at newlines and paste each component\n        // string, with soft breaks in between each.\n        if (text.includes('\\n')) {\n          return scheduleAction(\n            () => {\n              const parts = text.split('\\n')\n              parts.forEach((line, i) => {\n                if (line) {\n                  Editor.insertText(editor, line)\n                }\n                if (i !== parts.length - 1) {\n                  Editor.insertSoftBreak(editor)\n                }\n              })\n            },\n            {\n              at: targetRange,\n            }\n          )\n        }\n\n        if (Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n          const [start, end] = Range.edges(targetRange)\n\n          const diff = {\n            start: start.offset,\n            end: end.offset,\n            text,\n          }\n\n          // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n          // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n          // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n          // text events are fired with the correct target ranges, only the final 'insertComposition'\n          // isn't, so we can adjust the target range start offset if we are confident this is the\n          // swiftkey insert causing the issue.\n          if (text && insertPositionHint && type === 'insertCompositionText') {\n            const hintPosition =\n              insertPositionHint.start + insertPositionHint.text.search(/\\S|$/)\n            const diffPosition = diff.start + diff.text.search(/\\S|$/)\n\n            if (\n              diffPosition === hintPosition + 1 &&\n              diff.end ===\n                insertPositionHint.start + insertPositionHint.text.length\n            ) {\n              debug('adjusting swiftKey insert position using hint')\n              diff.start -= 1\n              insertPositionHint = null\n              scheduleFlush()\n            } else {\n              insertPositionHint = false\n            }\n          } else if (type === 'insertText') {\n            if (insertPositionHint === null) {\n              insertPositionHint = diff\n            } else if (\n              insertPositionHint &&\n              Range.isCollapsed(targetRange) &&\n              insertPositionHint.end + insertPositionHint.text.length ===\n                start.offset\n            ) {\n              insertPositionHint = {\n                ...insertPositionHint,\n                text: insertPositionHint.text + text,\n              }\n            } else {\n              insertPositionHint = false\n            }\n          } else {\n            insertPositionHint = false\n          }\n\n          if (canStoreDiff) {\n            storeDiff(start.path, diff)\n            return\n          }\n        }\n\n        return scheduleAction(() => Editor.insertText(editor, text), {\n          at: targetRange,\n        })\n      }\n    }\n  }\n\n  const hasPendingAction = () => {\n    return !!EDITOR_TO_PENDING_ACTION.get(editor)\n  }\n\n  const hasPendingDiffs = () => {\n    return !!EDITOR_TO_PENDING_DIFFS.get(editor)?.length\n  }\n\n  const hasPendingChanges = () => {\n    return hasPendingAction() || hasPendingDiffs()\n  }\n\n  const isFlushing = () => {\n    return flushing\n  }\n\n  const handleUserSelect = (range: Range | null) => {\n    EDITOR_TO_PENDING_SELECTION.set(editor, range)\n\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId)\n      flushTimeoutId = null\n    }\n\n    const { selection } = editor\n    if (!range) {\n      return\n    }\n\n    const pathChanged =\n      !selection || !Path.equals(selection.anchor.path, range.anchor.path)\n    const parentPathChanged =\n      !selection ||\n      !Path.equals(\n        selection.anchor.path.slice(0, -1),\n        range.anchor.path.slice(0, -1)\n      )\n\n    if ((pathChanged && insertPositionHint) || parentPathChanged) {\n      insertPositionHint = false\n    }\n\n    if (pathChanged || hasPendingDiffs()) {\n      flushTimeoutId = setTimeout(flush, FLUSH_DELAY)\n    }\n  }\n\n  const handleInput = () => {\n    if (hasPendingAction() || !hasPendingDiffs()) {\n      debug('flush input')\n      flush()\n    }\n  }\n\n  const handleKeyDown = (_: React.KeyboardEvent) => {\n    // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n    // directly next to a non-contenteditable element (= the placeholder).\n    // The only event fired soon enough for us to allow hiding the placeholder\n    // without swiftkey picking it up is the keydown event, so we have to hide it\n    // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n    if (!hasPendingDiffs()) {\n      updatePlaceholderVisibility(true)\n      setTimeout(updatePlaceholderVisibility)\n    }\n  }\n\n  const scheduleFlush = () => {\n    if (!hasPendingAction()) {\n      actionTimeoutId = setTimeout(flush)\n    }\n  }\n\n  const handleDomMutations = (mutations: MutationRecord[]) => {\n    if (hasPendingDiffs() || hasPendingAction()) {\n      return\n    }\n\n    if (\n      mutations.some(mutation => isTrackedMutation(editor, mutation, mutations))\n    ) {\n      // Cause a re-render to restore the dom state if we encounter tracked mutations without\n      // a corresponding pending action.\n      EDITOR_TO_FORCE_RENDER.get(editor)?.()\n    }\n  }\n\n  return {\n    flush,\n    scheduleFlush,\n\n    hasPendingDiffs,\n    hasPendingAction,\n    hasPendingChanges,\n\n    isFlushing,\n\n    handleUserSelect,\n    handleCompositionEnd,\n    handleCompositionStart,\n    handleDOMBeforeInput,\n    handleKeyDown,\n\n    handleDomMutations,\n    handleInput,\n  }\n}\n","import { useEffect, useRef } from 'react'\n\nexport function useIsMounted() {\n  const isMountedRef = useRef(false)\n\n  useEffect(() => {\n    isMountedRef.current = true\n    return () => {\n      isMountedRef.current = false\n    }\n  }, [])\n\n  return isMountedRef.current\n}\n","import { useLayoutEffect, useEffect } from 'react'\nimport { CAN_USE_DOM } from 'slate-dom'\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\n\nexport const useIsomorphicLayoutEffect = CAN_USE_DOM\n  ? useLayoutEffect\n  : useEffect\n","import { RefObject, useEffect, useState } from 'react'\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect'\n\nexport function useMutationObserver(\n  node: RefObject<HTMLElement>,\n  callback: MutationCallback,\n  options: MutationObserverInit\n) {\n  const [mutationObserver] = useState(() => new MutationObserver(callback))\n\n  useIsomorphicLayoutEffect(() => {\n    // Discard mutations caused during render phase. This works due to react calling\n    // useLayoutEffect synchronously after the render phase before the next tick.\n    mutationObserver.takeRecords()\n  })\n\n  useEffect(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined')\n    }\n\n    mutationObserver.observe(node.current, options)\n    return () => mutationObserver.disconnect()\n  }, [mutationObserver, node, options])\n}\n","import { RefObject, useState } from 'react'\nimport { useSlateStatic } from '../use-slate-static'\nimport { IS_ANDROID } from 'slate-dom'\nimport { EDITOR_TO_SCHEDULE_FLUSH } from 'slate-dom'\nimport {\n  createAndroidInputManager,\n  CreateAndroidInputManagerOptions,\n} from './android-input-manager'\nimport { useIsMounted } from '../use-is-mounted'\nimport { useMutationObserver } from '../use-mutation-observer'\n\ntype UseAndroidInputManagerOptions = {\n  node: RefObject<HTMLElement>\n} & Omit<\n  CreateAndroidInputManagerOptions,\n  'editor' | 'onUserInput' | 'receivedUserInput'\n>\n\nconst MUTATION_OBSERVER_CONFIG: MutationObserverInit = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n}\n\nexport const useAndroidInputManager = !IS_ANDROID\n  ? () => null\n  : ({ node, ...options }: UseAndroidInputManagerOptions) => {\n      if (!IS_ANDROID) {\n        return null\n      }\n\n      const editor = useSlateStatic()\n      const isMounted = useIsMounted()\n\n      const [inputManager] = useState(() =>\n        createAndroidInputManager({\n          editor,\n          ...options,\n        })\n      )\n\n      useMutationObserver(\n        node,\n        inputManager.handleDomMutations,\n        MUTATION_OBSERVER_CONFIG\n      )\n\n      EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush)\n      if (isMounted) {\n        inputManager.flush()\n      }\n\n      return inputManager\n    }\n","import React, { forwardRef, memo, useRef, useState } from 'react'\nimport { Editor, Text, Path, Element, Node } from 'slate'\n\nimport { ReactEditor, useSlateStatic } from '..'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport { IS_ANDROID, IS_IOS } from 'slate-dom'\nimport { MARK_PLACEHOLDER_SYMBOL } from 'slate-dom'\n\n/**\n * Leaf content strings.\n */\n\nconst String = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  text: Text\n}) => {\n  const { isLast, leaf, parent, text } = props\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, text)\n  const parentPath = Path.parent(path)\n  const isMarkPlaceholder = Boolean(leaf[MARK_PLACEHOLDER_SYMBOL])\n\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return <ZeroWidthString length={Node.string(parent).length} />\n  }\n\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (\n    leaf.text === '' &&\n    parent.children[parent.children.length - 1] === text &&\n    !editor.isInline(parent) &&\n    Editor.string(editor, parentPath) === ''\n  ) {\n    return <ZeroWidthString isLineBreak isMarkPlaceholder={isMarkPlaceholder} />\n  }\n\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return <ZeroWidthString isMarkPlaceholder={isMarkPlaceholder} />\n  }\n\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return <TextString isTrailing text={leaf.text} />\n  }\n\n  return <TextString text={leaf.text} />\n}\n\n/**\n * Leaf strings with text in them.\n */\nconst TextString = (props: { text: string; isTrailing?: boolean }) => {\n  const { text, isTrailing = false } = props\n  const ref = useRef<HTMLSpanElement>(null)\n  const getTextContent = () => {\n    return `${text ?? ''}${isTrailing ? '\\n' : ''}`\n  }\n  const [initialText] = useState(getTextContent)\n\n  // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n\n  // useLayoutEffect: updating our span before browser paint\n  useIsomorphicLayoutEffect(() => {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    const textWithTrailing = getTextContent()\n\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing\n    }\n\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n  })\n\n  // We intentionally render a memoized <span> that only receives the initial text content when the component is mounted.\n  // We defer to the layout effect above to update the `textContent` of the span element when needed.\n  return <MemoizedText ref={ref}>{initialText}</MemoizedText>\n}\n\nconst MemoizedText = memo(\n  forwardRef<HTMLSpanElement, { children: string }>((props, ref) => {\n    return (\n      <span data-slate-string ref={ref}>\n        {props.children}\n      </span>\n    )\n  })\n)\n\n/**\n * Leaf strings without text, render as zero-width strings.\n */\n\nexport const ZeroWidthString = (props: {\n  length?: number\n  isLineBreak?: boolean\n  isMarkPlaceholder?: boolean\n}) => {\n  const { length = 0, isLineBreak = false, isMarkPlaceholder = false } = props\n\n  const attributes: {\n    'data-slate-zero-width': string\n    'data-slate-length': number\n    'data-slate-mark-placeholder'?: boolean\n  } = {\n    'data-slate-zero-width': isLineBreak ? 'n' : 'z',\n    'data-slate-length': length,\n  }\n\n  if (isMarkPlaceholder) {\n    attributes['data-slate-mark-placeholder'] = true\n  }\n\n  return (\n    <span {...attributes}>\n      {!(IS_ANDROID || IS_IOS) || !isLineBreak ? '\\uFEFF' : null}\n      {isLineBreak ? <br /> : null}\n    </span>\n  )\n}\n\nexport default String\n","import React, {\n  useRef,\n  useCallback,\n  MutableRefObject,\n  useState,\n  useEffect,\n} from 'react'\nimport { JSX } from 'react'\nimport { Element, Text } from 'slate'\nimport { ResizeObserver as ResizeObserverPolyfill } from '@juggle/resize-observer'\nimport String from './string'\nimport {\n  PLACEHOLDER_SYMBOL,\n  EDITOR_TO_PLACEHOLDER_ELEMENT,\n  EDITOR_TO_FORCE_RENDER,\n} from 'slate-dom'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\nimport { useSlateStatic } from '../hooks/use-slate-static'\nimport { IS_WEBKIT, IS_ANDROID } from 'slate-dom'\n\n// Delay the placeholder on Android to prevent the keyboard from closing.\n// (https://github.com/ianstormtaylor/slate/pull/5368)\nconst PLACEHOLDER_DELAY = IS_ANDROID ? 300 : 0\n\nfunction disconnectPlaceholderResizeObserver(\n  placeholderResizeObserver: MutableRefObject<ResizeObserver | null>,\n  releaseObserver: boolean\n) {\n  if (placeholderResizeObserver.current) {\n    placeholderResizeObserver.current.disconnect()\n    if (releaseObserver) {\n      placeholderResizeObserver.current = null\n    }\n  }\n}\n\ntype TimerId = ReturnType<typeof setTimeout> | null\n\nfunction clearTimeoutRef(timeoutRef: MutableRefObject<TimerId>) {\n  if (timeoutRef.current) {\n    clearTimeout(timeoutRef.current)\n    timeoutRef.current = null\n  }\n}\n\n/**\n * Individual leaves in a text node with unique formatting.\n */\nconst Leaf = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: Text\n}) => {\n  const {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = (props: RenderLeafProps) => <DefaultLeaf {...props} />,\n  } = props\n\n  const editor = useSlateStatic()\n  const placeholderResizeObserver = useRef<ResizeObserver | null>(null)\n  const placeholderRef = useRef<HTMLElement | null>(null)\n  const [showPlaceholder, setShowPlaceholder] = useState(false)\n  const showPlaceholderTimeoutRef = useRef<TimerId>(null)\n\n  const callbackPlaceholderRef = useCallback(\n    (placeholderEl: HTMLElement | null) => {\n      disconnectPlaceholderResizeObserver(\n        placeholderResizeObserver,\n        placeholderEl == null\n      )\n\n      if (placeholderEl == null) {\n        EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor)\n        leaf.onPlaceholderResize?.(null)\n      } else {\n        EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl)\n\n        if (!placeholderResizeObserver.current) {\n          // Create a new observer and observe the placeholder element.\n          const ResizeObserver = window.ResizeObserver || ResizeObserverPolyfill\n          placeholderResizeObserver.current = new ResizeObserver(() => {\n            leaf.onPlaceholderResize?.(placeholderEl)\n          })\n        }\n        placeholderResizeObserver.current.observe(placeholderEl)\n        placeholderRef.current = placeholderEl\n      }\n    },\n    [placeholderRef, leaf, editor]\n  )\n\n  let children = (\n    <String isLast={isLast} leaf={leaf} parent={parent} text={text} />\n  )\n\n  const leafIsPlaceholder = Boolean(leaf[PLACEHOLDER_SYMBOL])\n  useEffect(() => {\n    if (leafIsPlaceholder) {\n      if (!showPlaceholderTimeoutRef.current) {\n        // Delay the placeholder, so it will not render in a selection\n        showPlaceholderTimeoutRef.current = setTimeout(() => {\n          setShowPlaceholder(true)\n          showPlaceholderTimeoutRef.current = null\n        }, PLACEHOLDER_DELAY)\n      }\n    } else {\n      clearTimeoutRef(showPlaceholderTimeoutRef)\n      setShowPlaceholder(false)\n    }\n    return () => clearTimeoutRef(showPlaceholderTimeoutRef)\n  }, [leafIsPlaceholder, setShowPlaceholder])\n\n  if (leafIsPlaceholder && showPlaceholder) {\n    const placeholderProps: RenderPlaceholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          top: 0,\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n          // Fixes https://github.com/udecode/plate/issues/2315\n          WebkitUserModify: IS_WEBKIT ? 'inherit' : undefined,\n        },\n        contentEditable: false,\n        ref: callbackPlaceholderRef,\n      },\n    }\n\n    children = (\n      <React.Fragment>\n        {renderPlaceholder(placeholderProps)}\n        {children}\n      </React.Fragment>\n    )\n  }\n\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  const attributes: {\n    'data-slate-leaf': true\n  } = {\n    'data-slate-leaf': true,\n  }\n\n  return renderLeaf({ attributes, children, leaf, text })\n}\n\nconst MemoizedLeaf = React.memo(Leaf, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.renderPlaceholder === prev.renderPlaceholder &&\n    next.text === prev.text &&\n    Text.equals(next.leaf, prev.leaf) &&\n    next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL]\n  )\n})\n\nexport const DefaultLeaf = (props: RenderLeafProps) => {\n  const { attributes, children } = props\n  return <span {...attributes}>{children}</span>\n}\n\nexport default MemoizedLeaf\n","import React, { useCallback, useRef } from 'react'\nimport { Element, DecoratedRange, Text as SlateText } from 'slate'\nimport { ReactEditor, useSlateStatic } from '..'\nimport { isTextDecorationsEqual } from 'slate-dom'\nimport {\n  EDITOR_TO_KEY_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  NODE_TO_ELEMENT,\n} from 'slate-dom'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\nimport Leaf from './leaf'\n\n/**\n * Text.\n */\n\nconst Text = (props: {\n  decorations: DecoratedRange[]\n  isLast: boolean\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: SlateText\n}) => {\n  const { decorations, isLast, parent, renderPlaceholder, renderLeaf, text } =\n    props\n  const editor = useSlateStatic()\n  const ref = useRef<HTMLSpanElement | null>(null)\n  const leaves = SlateText.decorations(text, decorations)\n  const key = ReactEditor.findKey(editor, text)\n  const children = []\n\n  for (let i = 0; i < leaves.length; i++) {\n    const leaf = leaves[i]\n\n    children.push(\n      <Leaf\n        isLast={isLast && i === leaves.length - 1}\n        key={`${key.id}-${i}`}\n        renderPlaceholder={renderPlaceholder}\n        leaf={leaf}\n        text={text}\n        parent={parent}\n        renderLeaf={renderLeaf}\n      />\n    )\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  const callbackRef = useCallback(\n    (span: HTMLSpanElement | null) => {\n      const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n      if (span) {\n        KEY_TO_ELEMENT?.set(key, span)\n        NODE_TO_ELEMENT.set(text, span)\n        ELEMENT_TO_NODE.set(span, text)\n      } else {\n        KEY_TO_ELEMENT?.delete(key)\n        NODE_TO_ELEMENT.delete(text)\n        if (ref.current) {\n          ELEMENT_TO_NODE.delete(ref.current)\n        }\n      }\n      ref.current = span\n    },\n    [ref, editor, key, text]\n  )\n  return (\n    <span data-slate-node=\"text\" ref={callbackRef}>\n      {children}\n    </span>\n  )\n}\n\nconst MemoizedText = React.memo(Text, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.renderPlaceholder === prev.renderPlaceholder &&\n    next.text === prev.text &&\n    isTextDecorationsEqual(next.decorations, prev.decorations)\n  )\n})\n\nexport default MemoizedText\n","import getDirection from 'direction'\nimport React, { useCallback } from 'react'\nimport { JSX } from 'react'\nimport {\n  Editor,\n  Element as SlateElement,\n  Node,\n  Range,\n  DecoratedRange,\n} from 'slate'\nimport { ReactEditor, useReadOnly, useSlateStatic } from '..'\nimport useChildren from '../hooks/use-children'\nimport { isElementDecorationsEqual } from 'slate-dom'\nimport {\n  EDITOR_TO_KEY_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  NODE_TO_ELEMENT,\n  NODE_TO_INDEX,\n  NODE_TO_PARENT,\n} from 'slate-dom'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from './editable'\n\nimport Text from './text'\n\n/**\n * Element.\n */\n\nconst Element = (props: {\n  decorations: DecoratedRange[]\n  element: SlateElement\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    element,\n    renderElement = (p: RenderElementProps) => <DefaultElement {...p} />,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const editor = useSlateStatic()\n  const readOnly = useReadOnly()\n  const isInline = editor.isInline(element)\n  const key = ReactEditor.findKey(editor, element)\n  const ref = useCallback(\n    (ref: HTMLElement | null) => {\n      // Update element-related weak maps with the DOM element ref.\n      const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n      if (ref) {\n        KEY_TO_ELEMENT?.set(key, ref)\n        NODE_TO_ELEMENT.set(element, ref)\n        ELEMENT_TO_NODE.set(ref, element)\n      } else {\n        KEY_TO_ELEMENT?.delete(key)\n        NODE_TO_ELEMENT.delete(element)\n      }\n    },\n    [editor, key, element]\n  )\n  let children: React.ReactNode = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  })\n\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  const attributes: {\n    'data-slate-node': 'element'\n    'data-slate-void'?: true\n    'data-slate-inline'?: true\n    contentEditable?: false\n    dir?: 'rtl'\n    ref: any\n  } = {\n    'data-slate-node': 'element',\n    ref,\n  }\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true\n  }\n\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    const text = Node.string(element)\n    const dir = getDirection(text)\n\n    if (dir === 'rtl') {\n      attributes.dir = dir\n    }\n  }\n\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false\n    }\n\n    const Tag = isInline ? 'span' : 'div'\n    const [[text]] = Node.texts(element)\n\n    children = (\n      <Tag\n        data-slate-spacer\n        style={{\n          height: '0',\n          color: 'transparent',\n          outline: 'none',\n          position: 'absolute',\n        }}\n      >\n        <Text\n          renderPlaceholder={renderPlaceholder}\n          decorations={[]}\n          isLast={false}\n          parent={element}\n          text={text}\n        />\n      </Tag>\n    )\n\n    NODE_TO_INDEX.set(text, 0)\n    NODE_TO_PARENT.set(text, element)\n  }\n\n  return renderElement({ attributes, children, element })\n}\n\nconst MemoizedElement = React.memo(Element, (prev, next) => {\n  return (\n    prev.element === next.element &&\n    prev.renderElement === next.renderElement &&\n    prev.renderLeaf === next.renderLeaf &&\n    prev.renderPlaceholder === next.renderPlaceholder &&\n    isElementDecorationsEqual(prev.decorations, next.decorations) &&\n    (prev.selection === next.selection ||\n      (!!prev.selection &&\n        !!next.selection &&\n        Range.equals(prev.selection, next.selection)))\n  )\n})\n\n/**\n * The default element renderer.\n */\n\nexport const DefaultElement = (props: RenderElementProps) => {\n  const { attributes, children, element } = props\n  const editor = useSlateStatic()\n  const Tag = editor.isInline(element) ? 'span' : 'div'\n  return (\n    <Tag {...attributes} style={{ position: 'relative' }}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default MemoizedElement\n","import { createContext, useContext } from 'react'\nimport { DecoratedRange, NodeEntry } from 'slate'\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\n\nexport const DecorateContext = createContext<\n  (entry: NodeEntry) => DecoratedRange[]\n>(() => [])\n\n/**\n * Get the current `decorate` prop of the editable.\n */\n\nexport const useDecorate = (): ((entry: NodeEntry) => DecoratedRange[]) => {\n  return useContext(DecorateContext)\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\n\nexport const SelectedContext = createContext(false)\n\n/**\n * Get the current `selected` state of an element.\n */\n\nexport const useSelected = (): boolean => {\n  return useContext(SelectedContext)\n}\n","import React from 'react'\nimport {\n  Ancestor,\n  Descendant,\n  Editor,\n  Element,\n  Range,\n  DecoratedRange,\n} from 'slate'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from '../components/editable'\n\nimport ElementComponent from '../components/element'\nimport TextComponent from '../components/text'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { IS_NODE_MAP_DIRTY, NODE_TO_INDEX, NODE_TO_PARENT } from 'slate-dom'\nimport { useDecorate } from './use-decorate'\nimport { SelectedContext } from './use-selected'\nimport { useSlateStatic } from './use-slate-static'\n\n/**\n * Children.\n */\n\nconst useChildren = (props: {\n  decorations: DecoratedRange[]\n  node: Ancestor\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const decorate = useDecorate()\n  const editor = useSlateStatic()\n  IS_NODE_MAP_DIRTY.set(editor as ReactEditor, false)\n  const path = ReactEditor.findPath(editor, node)\n  const children = []\n  const isLeafBlock =\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    Editor.hasInlines(editor, node)\n\n  for (let i = 0; i < node.children.length; i++) {\n    const p = path.concat(i)\n    const n = node.children[i] as Descendant\n    const key = ReactEditor.findKey(editor, n)\n    const range = Editor.range(editor, p)\n    const sel = selection && Range.intersection(range, selection)\n    const ds = decorate([n, p])\n\n    for (const dec of decorations) {\n      const d = Range.intersection(dec, range)\n\n      if (d) {\n        ds.push(d)\n      }\n    }\n\n    if (Element.isElement(n)) {\n      children.push(\n        <SelectedContext.Provider key={`provider-${key.id}`} value={!!sel}>\n          <ElementComponent\n            decorations={ds}\n            element={n}\n            key={key.id}\n            renderElement={renderElement}\n            renderPlaceholder={renderPlaceholder}\n            renderLeaf={renderLeaf}\n            selection={sel}\n          />\n        </SelectedContext.Provider>\n      )\n    } else {\n      children.push(\n        <TextComponent\n          decorations={ds}\n          key={key.id}\n          isLast={isLeafBlock && i === node.children.length - 1}\n          parent={node}\n          renderPlaceholder={renderPlaceholder}\n          renderLeaf={renderLeaf}\n          text={n}\n        />\n      )\n    }\n\n    NODE_TO_INDEX.set(n, i)\n    NODE_TO_PARENT.set(n, node)\n  }\n\n  return children\n}\n\nexport default useChildren\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\n\nexport const ReadOnlyContext = createContext(false)\n\n/**\n * Get the current `readOnly` state of the editor.\n */\n\nexport const useReadOnly = (): boolean => {\n  return useContext(ReadOnlyContext)\n}\n","import { createContext, useContext } from 'react'\nimport { Editor } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object, in a way that re-renders the\n * context whenever changes occur.\n */\n\nexport interface SlateContextValue {\n  v: number\n  editor: ReactEditor\n}\n\nexport const SlateContext = createContext<{\n  v: number\n  editor: ReactEditor\n} | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlate = (): Editor => {\n  const context = useContext(SlateContext)\n\n  if (!context) {\n    throw new Error(\n      `The \\`useSlate\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  const { editor } = context\n  return editor\n}\n\nexport const useSlateWithV = (): { editor: Editor; v: number } => {\n  const context = useContext(SlateContext)\n\n  if (!context) {\n    throw new Error(\n      `The \\`useSlate\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return context\n}\n","import { useCallback, useEffect, useRef } from 'react'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { useSlateStatic } from './use-slate-static'\n\nexport function useTrackUserInput() {\n  const editor = useSlateStatic()\n\n  const receivedUserInput = useRef<boolean>(false)\n  const animationFrameIdRef = useRef<number>(0)\n\n  const onUserInput = useCallback(() => {\n    if (receivedUserInput.current) {\n      return\n    }\n\n    receivedUserInput.current = true\n\n    const window = ReactEditor.getWindow(editor)\n    window.cancelAnimationFrame(animationFrameIdRef.current)\n\n    animationFrameIdRef.current = window.requestAnimationFrame(() => {\n      receivedUserInput.current = false\n    })\n  }, [editor])\n\n  useEffect(() => () => cancelAnimationFrame(animationFrameIdRef.current), [])\n\n  return {\n    receivedUserInput,\n    onUserInput,\n  }\n}\n","import { RefObject } from 'react'\nimport { ReactEditor } from '../../plugin/react-editor'\nimport { isTrackedMutation } from 'slate-dom'\n\nexport type RestoreDOMManager = {\n  registerMutations: (mutations: MutationRecord[]) => void\n  restoreDOM: () => void\n  clear: () => void\n}\n\nexport const createRestoreDomManager = (\n  editor: ReactEditor,\n  receivedUserInput: RefObject<boolean>\n): RestoreDOMManager => {\n  let bufferedMutations: MutationRecord[] = []\n\n  const clear = () => {\n    bufferedMutations = []\n  }\n\n  const registerMutations = (mutations: MutationRecord[]) => {\n    if (!receivedUserInput.current) {\n      return\n    }\n\n    const trackedMutations = mutations.filter(mutation =>\n      isTrackedMutation(editor, mutation, mutations)\n    )\n\n    bufferedMutations.push(...trackedMutations)\n  }\n\n  function restoreDOM() {\n    if (bufferedMutations.length > 0) {\n      bufferedMutations.reverse().forEach(mutation => {\n        if (mutation.type === 'characterData') {\n          // We don't want to restore the DOM for characterData mutations\n          // because this interrupts the composition.\n          return\n        }\n\n        mutation.removedNodes.forEach(node => {\n          mutation.target.insertBefore(node, mutation.nextSibling)\n        })\n\n        mutation.addedNodes.forEach(node => {\n          mutation.target.removeChild(node)\n        })\n      })\n\n      // Clear buffered mutations to ensure we don't undo them twice\n      clear()\n    }\n  }\n\n  return {\n    registerMutations,\n    restoreDOM,\n    clear,\n  }\n}\n","import React, {\n  Component,\n  ComponentType,\n  ContextType,\n  ReactNode,\n  RefObject,\n} from 'react'\nimport { EditorContext } from '../../hooks/use-slate-static'\nimport { IS_ANDROID } from 'slate-dom'\nimport {\n  createRestoreDomManager,\n  RestoreDOMManager,\n} from './restore-dom-manager'\n\nconst MUTATION_OBSERVER_CONFIG: MutationObserverInit = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n}\n\ntype RestoreDOMProps = {\n  children?: ReactNode\n  receivedUserInput: RefObject<boolean>\n  node: RefObject<HTMLDivElement>\n}\n\n// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\nclass RestoreDOMComponent extends Component<RestoreDOMProps> {\n  static contextType = EditorContext\n  context: ContextType<typeof EditorContext> = null\n\n  private manager: RestoreDOMManager | null = null\n  private mutationObserver: MutationObserver | null = null\n\n  observe() {\n    const { node } = this.props\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined')\n    }\n\n    this.mutationObserver?.observe(node.current, MUTATION_OBSERVER_CONFIG)\n  }\n\n  componentDidMount() {\n    const { receivedUserInput } = this.props\n    const editor = this.context!\n\n    this.manager = createRestoreDomManager(editor, receivedUserInput)\n    this.mutationObserver = new MutationObserver(this.manager.registerMutations)\n\n    this.observe()\n  }\n\n  getSnapshotBeforeUpdate() {\n    const pendingMutations = this.mutationObserver?.takeRecords()\n    if (pendingMutations?.length) {\n      this.manager?.registerMutations(pendingMutations)\n    }\n\n    this.mutationObserver?.disconnect()\n    this.manager?.restoreDOM()\n\n    return null\n  }\n\n  componentDidUpdate() {\n    this.manager?.clear()\n    this.observe()\n  }\n\n  componentWillUnmount() {\n    this.mutationObserver?.disconnect()\n  }\n\n  render() {\n    return this.props.children\n  }\n}\n\nexport const RestoreDOM: ComponentType<RestoreDOMProps> = IS_ANDROID\n  ? RestoreDOMComponent\n  : ({ children }) => <>{children}</>\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `composing` state of the editor.\n */\n\nexport const ComposingContext = createContext(false)\n\n/**\n * Get the current `composing` state of the editor.\n */\n\nexport const useComposing = (): boolean => {\n  return useContext(ComposingContext)\n}\n","import getDirection from 'direction'\nimport debounce from 'lodash/debounce'\nimport throttle from 'lodash/throttle'\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n  forwardRef,\n  ForwardedRef,\n} from 'react'\nimport { JSX } from 'react'\nimport scrollIntoView from 'scroll-into-view-if-needed'\nimport {\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Path,\n  Range,\n  Text,\n  Transforms,\n  DecoratedRange,\n} from 'slate'\nimport { useAndroidInputManager } from '../hooks/android-input-manager/use-android-input-manager'\nimport useChildren from '../hooks/use-children'\nimport { DecorateContext } from '../hooks/use-decorate'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport { ReadOnlyContext } from '../hooks/use-read-only'\nimport { useSlate } from '../hooks/use-slate'\nimport { useTrackUserInput } from '../hooks/use-track-user-input'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { TRIPLE_CLICK } from 'slate-dom'\nimport {\n  DOMElement,\n  DOMRange,\n  DOMText,\n  getActiveElement,\n  getDefaultView,\n  getSelection,\n  isDOMElement,\n  isDOMNode,\n  isPlainTextOnlyPaste,\n} from 'slate-dom'\nimport {\n  CAN_USE_DOM,\n  HAS_BEFORE_INPUT_SUPPORT,\n  IS_ANDROID,\n  IS_CHROME,\n  IS_FIREFOX,\n  IS_FIREFOX_LEGACY,\n  IS_IOS,\n  IS_WEBKIT,\n  IS_UC_MOBILE,\n  IS_WECHATBROWSER,\n} from 'slate-dom'\nimport { Hotkeys } from 'slate-dom'\nimport {\n  IS_NODE_MAP_DIRTY,\n  EDITOR_TO_ELEMENT,\n  EDITOR_TO_FORCE_RENDER,\n  EDITOR_TO_PENDING_INSERTION_MARKS,\n  EDITOR_TO_USER_MARKS,\n  EDITOR_TO_USER_SELECTION,\n  EDITOR_TO_WINDOW,\n  ELEMENT_TO_NODE,\n  IS_COMPOSING,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  MARK_PLACEHOLDER_SYMBOL,\n  NODE_TO_ELEMENT,\n  PLACEHOLDER_SYMBOL,\n} from 'slate-dom'\nimport { RestoreDOM } from './restore-dom/restore-dom'\nimport { AndroidInputManager } from '../hooks/android-input-manager/android-input-manager'\nimport { ComposingContext } from '../hooks/use-composing'\n\ntype DeferredOperation = () => void\n\nconst Children = (props: Parameters<typeof useChildren>[0]) => (\n  <React.Fragment>{useChildren(props)}</React.Fragment>\n)\n\n/**\n * `RenderElementProps` are passed to the `renderElement` handler.\n */\n\nexport interface RenderElementProps {\n  children: any\n  element: Element\n  attributes: {\n    'data-slate-node': 'element'\n    'data-slate-inline'?: true\n    'data-slate-void'?: true\n    dir?: 'rtl'\n    ref: any\n  }\n}\n\n/**\n * `RenderLeafProps` are passed to the `renderLeaf` handler.\n */\n\nexport interface RenderLeafProps {\n  children: any\n  leaf: Text\n  text: Text\n  attributes: {\n    'data-slate-leaf': true\n  }\n}\n\n/**\n * `EditableProps` are passed to the `<Editable>` component.\n */\n\nexport type EditableProps = {\n  decorate?: (entry: NodeEntry) => DecoratedRange[]\n  onDOMBeforeInput?: (event: InputEvent) => void\n  placeholder?: string\n  readOnly?: boolean\n  role?: string\n  style?: React.CSSProperties\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  renderPlaceholder?: (props: RenderPlaceholderProps) => JSX.Element\n  scrollSelectionIntoView?: (editor: ReactEditor, domRange: DOMRange) => void\n  as?: React.ElementType\n  disableDefaultStyles?: boolean\n} & React.TextareaHTMLAttributes<HTMLDivElement>\n\n/**\n * Editable.\n */\n\nexport const Editable = forwardRef(\n  (props: EditableProps, forwardedRef: ForwardedRef<HTMLDivElement>) => {\n    const defaultRenderPlaceholder = useCallback(\n      (props: RenderPlaceholderProps) => <DefaultPlaceholder {...props} />,\n      []\n    )\n    const {\n      autoFocus,\n      decorate = defaultDecorate,\n      onDOMBeforeInput: propsOnDOMBeforeInput,\n      placeholder,\n      readOnly = false,\n      renderElement,\n      renderLeaf,\n      renderPlaceholder = defaultRenderPlaceholder,\n      scrollSelectionIntoView = defaultScrollSelectionIntoView,\n      style: userStyle = {},\n      as: Component = 'div',\n      disableDefaultStyles = false,\n      ...attributes\n    } = props\n    const editor = useSlate()\n    // Rerender editor when composition status changed\n    const [isComposing, setIsComposing] = useState(false)\n    const ref = useRef<HTMLDivElement | null>(null)\n    const deferredOperations = useRef<DeferredOperation[]>([])\n    const [placeholderHeight, setPlaceholderHeight] = useState<\n      number | undefined\n    >()\n    const processing = useRef(false)\n\n    const { onUserInput, receivedUserInput } = useTrackUserInput()\n\n    const [, forceRender] = useReducer(s => s + 1, 0)\n    EDITOR_TO_FORCE_RENDER.set(editor, forceRender)\n\n    // Update internal state on each render.\n    IS_READ_ONLY.set(editor, readOnly)\n\n    // Keep track of some state for the event handler logic.\n    const state = useMemo(\n      () => ({\n        isDraggingInternally: false,\n        isUpdatingSelection: false,\n        latestElement: null as DOMElement | null,\n        hasMarkPlaceholder: false,\n      }),\n      []\n    )\n\n    // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n    // needs to be manually focused.\n    useEffect(() => {\n      if (ref.current && autoFocus) {\n        ref.current.focus()\n      }\n    }, [autoFocus])\n\n    /**\n     * The AndroidInputManager object has a cyclical dependency on onDOMSelectionChange\n     *\n     * It is defined as a reference to simplify hook dependencies and clarify that\n     * it needs to be initialized.\n     */\n    const androidInputManagerRef = useRef<\n      AndroidInputManager | null | undefined\n    >()\n\n    // Listen on the native `selectionchange` event to be able to update any time\n    // the selection changes. This is required because React's `onSelect` is leaky\n    // and non-standard so it doesn't fire until after a selection has been\n    // released. This causes issues in situations where another change happens\n    // while a selection is being dragged.\n    const onDOMSelectionChange = useMemo(\n      () =>\n        throttle(() => {\n          if (IS_NODE_MAP_DIRTY.get(editor)) {\n            onDOMSelectionChange()\n            return\n          }\n\n          const el = ReactEditor.toDOMNode(editor, editor)\n          const root = el.getRootNode()\n\n          if (!processing.current && IS_WEBKIT && root instanceof ShadowRoot) {\n            processing.current = true\n\n            const active = getActiveElement()\n\n            if (active) {\n              document.execCommand('indent')\n            } else {\n              Transforms.deselect(editor)\n            }\n\n            processing.current = false\n            return\n          }\n\n          const androidInputManager = androidInputManagerRef.current\n          if (\n            (IS_ANDROID || !ReactEditor.isComposing(editor)) &&\n            (!state.isUpdatingSelection || androidInputManager?.isFlushing()) &&\n            !state.isDraggingInternally\n          ) {\n            const root = ReactEditor.findDocumentOrShadowRoot(editor)\n            const { activeElement } = root\n            const el = ReactEditor.toDOMNode(editor, editor)\n            const domSelection = getSelection(root)\n\n            if (activeElement === el) {\n              state.latestElement = activeElement\n              IS_FOCUSED.set(editor, true)\n            } else {\n              IS_FOCUSED.delete(editor)\n            }\n\n            if (!domSelection) {\n              return Transforms.deselect(editor)\n            }\n\n            const { anchorNode, focusNode } = domSelection\n\n            const anchorNodeSelectable =\n              ReactEditor.hasEditableTarget(editor, anchorNode) ||\n              ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode)\n\n            const focusNodeInEditor = ReactEditor.hasTarget(editor, focusNode)\n\n            if (anchorNodeSelectable && focusNodeInEditor) {\n              const range = ReactEditor.toSlateRange(editor, domSelection, {\n                exactMatch: false,\n                suppressThrow: true,\n              })\n\n              if (range) {\n                if (\n                  !ReactEditor.isComposing(editor) &&\n                  !androidInputManager?.hasPendingChanges() &&\n                  !androidInputManager?.isFlushing()\n                ) {\n                  Transforms.select(editor, range)\n                } else {\n                  androidInputManager?.handleUserSelect(range)\n                }\n              }\n            }\n\n            // Deselect the editor if the dom selection is not selectable in readonly mode\n            if (readOnly && (!anchorNodeSelectable || !focusNodeInEditor)) {\n              Transforms.deselect(editor)\n            }\n          }\n        }, 100),\n      [editor, readOnly, state]\n    )\n\n    const scheduleOnDOMSelectionChange = useMemo(\n      () => debounce(onDOMSelectionChange, 0),\n      [onDOMSelectionChange]\n    )\n\n    androidInputManagerRef.current = useAndroidInputManager({\n      node: ref,\n      onDOMSelectionChange,\n      scheduleOnDOMSelectionChange,\n    })\n\n    useIsomorphicLayoutEffect(() => {\n      // Update element-related weak maps with the DOM element ref.\n      let window\n      if (ref.current && (window = getDefaultView(ref.current))) {\n        EDITOR_TO_WINDOW.set(editor, window)\n        EDITOR_TO_ELEMENT.set(editor, ref.current)\n        NODE_TO_ELEMENT.set(editor, ref.current)\n        ELEMENT_TO_NODE.set(ref.current, editor)\n      } else {\n        NODE_TO_ELEMENT.delete(editor)\n      }\n\n      // Make sure the DOM selection state is in sync.\n      const { selection } = editor\n      const root = ReactEditor.findDocumentOrShadowRoot(editor)\n      const domSelection = getSelection(root)\n\n      if (\n        !domSelection ||\n        !ReactEditor.isFocused(editor) ||\n        androidInputManagerRef.current?.hasPendingAction()\n      ) {\n        return\n      }\n\n      const setDomSelection = (forceChange?: boolean) => {\n        const hasDomSelection = domSelection.type !== 'None'\n\n        // If the DOM selection is properly unset, we're done.\n        if (!selection && !hasDomSelection) {\n          return\n        }\n\n        // Get anchorNode and focusNode\n        const focusNode = domSelection.focusNode\n        let anchorNode\n\n        // COMPAT: In firefox the normal selection way does not work\n        // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n        if (IS_FIREFOX && domSelection.rangeCount > 1) {\n          const firstRange = domSelection.getRangeAt(0)\n          const lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1)\n\n          // Right to left\n          if (firstRange.startContainer === focusNode) {\n            anchorNode = lastRange.endContainer\n          } else {\n            // Left to right\n            anchorNode = firstRange.startContainer\n          }\n        } else {\n          anchorNode = domSelection.anchorNode\n        }\n\n        // verify that the dom selection is in the editor\n        const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n        let hasDomSelectionInEditor = false\n        if (\n          editorElement.contains(anchorNode) &&\n          editorElement.contains(focusNode)\n        ) {\n          hasDomSelectionInEditor = true\n        }\n\n        // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n        if (\n          hasDomSelection &&\n          hasDomSelectionInEditor &&\n          selection &&\n          !forceChange\n        ) {\n          const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: true,\n\n            // domSelection is not necessarily a valid Slate range\n            // (e.g. when clicking on contentEditable:false element)\n            suppressThrow: true,\n          })\n\n          if (slateRange && Range.equals(slateRange, selection)) {\n            if (!state.hasMarkPlaceholder) {\n              return\n            }\n\n            // Ensure selection is inside the mark placeholder\n            if (\n              anchorNode?.parentElement?.hasAttribute(\n                'data-slate-mark-placeholder'\n              )\n            ) {\n              return\n            }\n          }\n        }\n\n        // when <Editable/> is being controlled through external value\n        // then its children might just change - DOM responds to it on its own\n        // but Slate's value is not being updated through any operation\n        // and thus it doesn't transform selection on its own\n        if (selection && !ReactEditor.hasRange(editor, selection)) {\n          editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n            suppressThrow: true,\n          })\n          return\n        }\n\n        // Otherwise the DOM selection is out of sync, so update it.\n        state.isUpdatingSelection = true\n\n        let newDomRange: DOMRange | null = null\n\n        try {\n          newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n        } catch (e) {\n          // Ignore, dom and state might be out of sync\n        }\n\n        if (newDomRange) {\n          if (ReactEditor.isComposing(editor) && !IS_ANDROID) {\n            domSelection.collapseToEnd()\n          } else if (Range.isBackward(selection!)) {\n            domSelection.setBaseAndExtent(\n              newDomRange.endContainer,\n              newDomRange.endOffset,\n              newDomRange.startContainer,\n              newDomRange.startOffset\n            )\n          } else {\n            domSelection.setBaseAndExtent(\n              newDomRange.startContainer,\n              newDomRange.startOffset,\n              newDomRange.endContainer,\n              newDomRange.endOffset\n            )\n          }\n          scrollSelectionIntoView(editor, newDomRange)\n        } else {\n          domSelection.removeAllRanges()\n        }\n\n        return newDomRange\n      }\n\n      // In firefox if there is more then 1 range and we call setDomSelection we remove the ability to select more cells in a table\n      if (domSelection.rangeCount <= 1) {\n        setDomSelection()\n      }\n\n      const ensureSelection =\n        androidInputManagerRef.current?.isFlushing() === 'action'\n\n      if (!IS_ANDROID || !ensureSelection) {\n        setTimeout(() => {\n          state.isUpdatingSelection = false\n        })\n        return\n      }\n\n      let timeoutId: ReturnType<typeof setTimeout> | null = null\n      const animationFrameId = requestAnimationFrame(() => {\n        if (ensureSelection) {\n          const ensureDomSelection = (forceChange?: boolean) => {\n            try {\n              const el = ReactEditor.toDOMNode(editor, editor)\n              el.focus()\n\n              setDomSelection(forceChange)\n            } catch (e) {\n              // Ignore, dom and state might be out of sync\n            }\n          }\n\n          // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n          // This essentially would make setting the slate selection during an update meaningless, so we force it\n          // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n          // visible flicker.\n          ensureDomSelection()\n\n          timeoutId = setTimeout(() => {\n            // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n            // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n            // the animation frame to ensure it displays the correct state.\n            ensureDomSelection(true)\n            state.isUpdatingSelection = false\n          })\n        }\n      })\n\n      return () => {\n        cancelAnimationFrame(animationFrameId)\n        if (timeoutId) {\n          clearTimeout(timeoutId)\n        }\n      }\n    })\n\n    // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n    // is required because React's `beforeinput` is fake and never really attaches\n    // to the real event sadly. (2019/11/01)\n    // https://github.com/facebook/react/issues/11211\n    const onDOMBeforeInput = useCallback(\n      (event: InputEvent) => {\n        const el = ReactEditor.toDOMNode(editor, editor)\n        const root = el.getRootNode()\n\n        if (processing?.current && IS_WEBKIT && root instanceof ShadowRoot) {\n          const ranges = event.getTargetRanges()\n          const range = ranges[0]\n\n          const newRange = new window.Range()\n\n          newRange.setStart(range.startContainer, range.startOffset)\n          newRange.setEnd(range.endContainer, range.endOffset)\n\n          // Translate the DOM Range into a Slate Range\n          const slateRange = ReactEditor.toSlateRange(editor, newRange, {\n            exactMatch: false,\n            suppressThrow: false,\n          })\n\n          Transforms.select(editor, slateRange)\n\n          event.preventDefault()\n          event.stopImmediatePropagation()\n          return\n        }\n        onUserInput()\n\n        if (\n          !readOnly &&\n          ReactEditor.hasEditableTarget(editor, event.target) &&\n          !isDOMEventHandled(event, propsOnDOMBeforeInput)\n        ) {\n          // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n          if (androidInputManagerRef.current) {\n            return androidInputManagerRef.current.handleDOMBeforeInput(event)\n          }\n\n          // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n          // triggering a `beforeinput` expecting the change to be applied to the immediately before\n          // set selection.\n          scheduleOnDOMSelectionChange.flush()\n          onDOMSelectionChange.flush()\n\n          const { selection } = editor\n          const { inputType: type } = event\n          const data = (event as any).dataTransfer || event.data || undefined\n\n          const isCompositionChange =\n            type === 'insertCompositionText' || type === 'deleteCompositionText'\n\n          // COMPAT: use composition change events as a hint to where we should insert\n          // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n          if (isCompositionChange && ReactEditor.isComposing(editor)) {\n            return\n          }\n\n          let native = false\n          if (\n            type === 'insertText' &&\n            selection &&\n            Range.isCollapsed(selection) &&\n            // Only use native character insertion for single characters a-z or space for now.\n            // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n            // causes duplicate inserts.\n            event.data &&\n            event.data.length === 1 &&\n            /[a-z ]/i.test(event.data) &&\n            // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n            // When there is an inline element, e.g. a link, and you select\n            // right after it (the start of the next node).\n            selection.anchor.offset !== 0\n          ) {\n            native = true\n\n            // Skip native if there are marks, as\n            // `insertText` will insert a node, not just text.\n            if (editor.marks) {\n              native = false\n            }\n\n            // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint)\n            if (!IS_NODE_MAP_DIRTY.get(editor)) {\n              // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n              // Therefore we don't allow native events to insert text at the end of anchor nodes.\n              const { anchor } = selection\n\n              const [node, offset] = ReactEditor.toDOMPoint(editor, anchor)\n              const anchorNode = node.parentElement?.closest('a')\n\n              const window = ReactEditor.getWindow(editor)\n\n              if (\n                native &&\n                anchorNode &&\n                ReactEditor.hasDOMNode(editor, anchorNode)\n              ) {\n                // Find the last text node inside the anchor.\n                const lastText = window?.document\n                  .createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT)\n                  .lastChild() as DOMText | null\n\n                if (\n                  lastText === node &&\n                  lastText.textContent?.length === offset\n                ) {\n                  native = false\n                }\n              }\n\n              // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n              // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n              if (\n                native &&\n                node.parentElement &&\n                window?.getComputedStyle(node.parentElement)?.whiteSpace ===\n                  'pre'\n              ) {\n                const block = Editor.above(editor, {\n                  at: anchor.path,\n                  match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n                })\n\n                if (block && Node.string(block[0]).includes('\\t')) {\n                  native = false\n                }\n              }\n            }\n          }\n          // COMPAT: For the deleting forward/backward input types we don't want\n          // to change the selection because it is the range that will be deleted,\n          // and those commands determine that for themselves.\n          // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint via ReactEditor.toSlateRange)\n          if (\n            (!type.startsWith('delete') || type.startsWith('deleteBy')) &&\n            !IS_NODE_MAP_DIRTY.get(editor)\n          ) {\n            const [targetRange] = (event as any).getTargetRanges()\n\n            if (targetRange) {\n              const range = ReactEditor.toSlateRange(editor, targetRange, {\n                exactMatch: false,\n                suppressThrow: false,\n              })\n\n              if (!selection || !Range.equals(selection, range)) {\n                native = false\n\n                const selectionRef =\n                  !isCompositionChange &&\n                  editor.selection &&\n                  Editor.rangeRef(editor, editor.selection)\n\n                Transforms.select(editor, range)\n\n                if (selectionRef) {\n                  EDITOR_TO_USER_SELECTION.set(editor, selectionRef)\n                }\n              }\n            }\n          }\n\n          // Composition change types occur while a user is composing text and can't be\n          // cancelled. Let them through and wait for the composition to end.\n          if (isCompositionChange) {\n            return\n          }\n\n          if (!native) {\n            event.preventDefault()\n          }\n\n          // COMPAT: If the selection is expanded, even if the command seems like\n          // a delete forward/backward command it should delete the selection.\n          if (\n            selection &&\n            Range.isExpanded(selection) &&\n            type.startsWith('delete')\n          ) {\n            const direction = type.endsWith('Backward') ? 'backward' : 'forward'\n            Editor.deleteFragment(editor, { direction })\n            return\n          }\n\n          switch (type) {\n            case 'deleteByComposition':\n            case 'deleteByCut':\n            case 'deleteByDrag': {\n              Editor.deleteFragment(editor)\n              break\n            }\n\n            case 'deleteContent':\n            case 'deleteContentForward': {\n              Editor.deleteForward(editor)\n              break\n            }\n\n            case 'deleteContentBackward': {\n              Editor.deleteBackward(editor)\n              break\n            }\n\n            case 'deleteEntireSoftLine': {\n              Editor.deleteBackward(editor, { unit: 'line' })\n              Editor.deleteForward(editor, { unit: 'line' })\n              break\n            }\n\n            case 'deleteHardLineBackward': {\n              Editor.deleteBackward(editor, { unit: 'block' })\n              break\n            }\n\n            case 'deleteSoftLineBackward': {\n              Editor.deleteBackward(editor, { unit: 'line' })\n              break\n            }\n\n            case 'deleteHardLineForward': {\n              Editor.deleteForward(editor, { unit: 'block' })\n              break\n            }\n\n            case 'deleteSoftLineForward': {\n              Editor.deleteForward(editor, { unit: 'line' })\n              break\n            }\n\n            case 'deleteWordBackward': {\n              Editor.deleteBackward(editor, { unit: 'word' })\n              break\n            }\n\n            case 'deleteWordForward': {\n              Editor.deleteForward(editor, { unit: 'word' })\n              break\n            }\n\n            case 'insertLineBreak':\n              Editor.insertSoftBreak(editor)\n              break\n\n            case 'insertParagraph': {\n              Editor.insertBreak(editor)\n              break\n            }\n\n            case 'insertFromComposition':\n            case 'insertFromDrop':\n            case 'insertFromPaste':\n            case 'insertFromYank':\n            case 'insertReplacementText':\n            case 'insertText': {\n              if (type === 'insertFromComposition') {\n                // COMPAT: in Safari, `compositionend` is dispatched after the\n                // `beforeinput` for \"insertFromComposition\". But if we wait for it\n                // then we will abort because we're still composing and the selection\n                // won't be updated properly.\n                // https://www.w3.org/TR/input-events-2/\n                if (ReactEditor.isComposing(editor)) {\n                  setIsComposing(false)\n                  IS_COMPOSING.set(editor, false)\n                }\n              }\n\n              // use a weak comparison instead of 'instanceof' to allow\n              // programmatic access of paste events coming from external windows\n              // like cypress where cy.window does not work realibly\n              if (data?.constructor.name === 'DataTransfer') {\n                ReactEditor.insertData(editor, data)\n              } else if (typeof data === 'string') {\n                // Only insertText operations use the native functionality, for now.\n                // Potentially expand to single character deletes, as well.\n                if (native) {\n                  deferredOperations.current.push(() =>\n                    Editor.insertText(editor, data)\n                  )\n                } else {\n                  Editor.insertText(editor, data)\n                }\n              }\n\n              break\n            }\n          }\n\n          // Restore the actual user section if nothing manually set it.\n          const toRestore = EDITOR_TO_USER_SELECTION.get(editor)?.unref()\n          EDITOR_TO_USER_SELECTION.delete(editor)\n\n          if (\n            toRestore &&\n            (!editor.selection || !Range.equals(editor.selection, toRestore))\n          ) {\n            Transforms.select(editor, toRestore)\n          }\n        }\n      },\n      [\n        editor,\n        onDOMSelectionChange,\n        onUserInput,\n        propsOnDOMBeforeInput,\n        readOnly,\n        scheduleOnDOMSelectionChange,\n      ]\n    )\n\n    const callbackRef = useCallback(\n      (node: HTMLDivElement | null) => {\n        if (node == null) {\n          onDOMSelectionChange.cancel()\n          scheduleOnDOMSelectionChange.cancel()\n\n          EDITOR_TO_ELEMENT.delete(editor)\n          NODE_TO_ELEMENT.delete(editor)\n\n          if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n            // @ts-ignore The `beforeinput` event isn't recognized.\n            ref.current.removeEventListener('beforeinput', onDOMBeforeInput)\n          }\n        } else {\n          // Attach a native DOM event handler for `beforeinput` events, because React's\n          // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n          // real `beforeinput` events sadly... (2019/11/04)\n          // https://github.com/facebook/react/issues/11211\n          if (HAS_BEFORE_INPUT_SUPPORT) {\n            // @ts-ignore The `beforeinput` event isn't recognized.\n            node.addEventListener('beforeinput', onDOMBeforeInput)\n          }\n        }\n\n        ref.current = node\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node)\n        } else if (forwardedRef) {\n          forwardedRef.current = node\n        }\n      },\n      [\n        onDOMSelectionChange,\n        scheduleOnDOMSelectionChange,\n        editor,\n        onDOMBeforeInput,\n        forwardedRef,\n      ]\n    )\n\n    useIsomorphicLayoutEffect(() => {\n      const window = ReactEditor.getWindow(editor)\n\n      // COMPAT: In Chrome, `selectionchange` events can fire when <input> and\n      // <textarea> elements are appended to the DOM, causing\n      // `editor.selection` to be overwritten in some circumstances.\n      // (2025/01/16) https://issues.chromium.org/issues/389368412\n      const onSelectionChange = ({ target }: Event) => {\n        const targetElement = target instanceof HTMLElement ? target : null\n        const targetTagName = targetElement?.tagName\n        if (targetTagName === 'INPUT' || targetTagName === 'TEXTAREA') {\n          return\n        }\n        scheduleOnDOMSelectionChange()\n      }\n\n      // Attach a native DOM event handler for `selectionchange`, because React's\n      // built-in `onSelect` handler doesn't fire for all selection changes. It's\n      // a leaky polyfill that only fires on keypresses or clicks. Instead, we\n      // want to fire for any change to the selection inside the editor.\n      // (2019/11/04) https://github.com/facebook/react/issues/5785\n      window.document.addEventListener('selectionchange', onSelectionChange)\n\n      // Listen for dragend and drop globally. In Firefox, if a drop handler\n      // initiates an operation that causes the originally dragged element to\n      // unmount, that element will not emit a dragend event. (2024/06/21)\n      const stoppedDragging = () => {\n        state.isDraggingInternally = false\n      }\n      window.document.addEventListener('dragend', stoppedDragging)\n      window.document.addEventListener('drop', stoppedDragging)\n\n      return () => {\n        window.document.removeEventListener(\n          'selectionchange',\n          onSelectionChange\n        )\n        window.document.removeEventListener('dragend', stoppedDragging)\n        window.document.removeEventListener('drop', stoppedDragging)\n      }\n    }, [scheduleOnDOMSelectionChange, state])\n\n    const decorations = decorate([editor, []])\n\n    const showPlaceholder =\n      placeholder &&\n      editor.children.length === 1 &&\n      Array.from(Node.texts(editor)).length === 1 &&\n      Node.string(editor) === '' &&\n      !isComposing\n\n    const placeHolderResizeHandler = useCallback(\n      (placeholderEl: HTMLElement | null) => {\n        if (placeholderEl && showPlaceholder) {\n          setPlaceholderHeight(placeholderEl.getBoundingClientRect()?.height)\n        } else {\n          setPlaceholderHeight(undefined)\n        }\n      },\n      [showPlaceholder]\n    )\n\n    if (showPlaceholder) {\n      const start = Editor.start(editor, [])\n      decorations.push({\n        [PLACEHOLDER_SYMBOL]: true,\n        placeholder,\n        onPlaceholderResize: placeHolderResizeHandler,\n        anchor: start,\n        focus: start,\n      })\n    }\n\n    const { marks } = editor\n    state.hasMarkPlaceholder = false\n\n    if (editor.selection && Range.isCollapsed(editor.selection) && marks) {\n      const { anchor } = editor.selection\n      const leaf = Node.leaf(editor, anchor.path)\n      const { text, ...rest } = leaf\n\n      // While marks isn't a 'complete' text, we can still use loose Text.equals\n      // here which only compares marks anyway.\n      if (!Text.equals(leaf, marks as Text, { loose: true })) {\n        state.hasMarkPlaceholder = true\n\n        const unset = Object.fromEntries(\n          Object.keys(rest).map(mark => [mark, null])\n        )\n\n        decorations.push({\n          [MARK_PLACEHOLDER_SYMBOL]: true,\n          ...unset,\n          ...marks,\n\n          anchor,\n          focus: anchor,\n        })\n      }\n    }\n\n    // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n    // before we receive the composition end event.\n    useEffect(() => {\n      setTimeout(() => {\n        const { selection } = editor\n        if (selection) {\n          const { anchor } = selection\n          const text = Node.leaf(editor, anchor.path)\n\n          // While marks isn't a 'complete' text, we can still use loose Text.equals\n          // here which only compares marks anyway.\n          if (marks && !Text.equals(text, marks as Text, { loose: true })) {\n            EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks)\n            return\n          }\n        }\n\n        EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor)\n      })\n    })\n\n    return (\n      <ReadOnlyContext.Provider value={readOnly}>\n        <ComposingContext.Provider value={isComposing}>\n          <DecorateContext.Provider value={decorate}>\n            <RestoreDOM node={ref} receivedUserInput={receivedUserInput}>\n              <Component\n                role={readOnly ? undefined : 'textbox'}\n                aria-multiline={readOnly ? undefined : true}\n                {...attributes}\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n                // have to use hacks to make these replacement-based features work.\n                // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n                // mismatch warning app moves to browser. Pass-through consumer props when\n                // not CAN_USE_DOM (SSR) and default to falsy value\n                spellCheck={\n                  HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n                    ? attributes.spellCheck\n                    : false\n                }\n                autoCorrect={\n                  HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n                    ? attributes.autoCorrect\n                    : 'false'\n                }\n                autoCapitalize={\n                  HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n                    ? attributes.autoCapitalize\n                    : 'false'\n                }\n                data-slate-editor\n                data-slate-node=\"value\"\n                // explicitly set this\n                contentEditable={!readOnly}\n                // in some cases, a decoration needs access to the range / selection to decorate a text node,\n                // then you will select the whole text node when you select part the of text\n                // this magic zIndex=\"-1\" will fix it\n                zindex={-1}\n                suppressContentEditableWarning\n                ref={callbackRef}\n                style={{\n                  ...(disableDefaultStyles\n                    ? {}\n                    : {\n                        // Allow positioning relative to the editable element.\n                        position: 'relative',\n                        // Preserve adjacent whitespace and new lines.\n                        whiteSpace: 'pre-wrap',\n                        // Allow words to break if they are too long.\n                        wordWrap: 'break-word',\n                        // Make the minimum height that of the placeholder.\n                        ...(placeholderHeight\n                          ? { minHeight: placeholderHeight }\n                          : {}),\n                      }),\n                  // Allow for passed-in styles to override anything.\n                  ...userStyle,\n                }}\n                onBeforeInput={useCallback(\n                  (event: React.FormEvent<HTMLDivElement>) => {\n                    // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                    // fall back to React's leaky polyfill instead just for it. It\n                    // only works for the `insertText` input type.\n                    if (\n                      !HAS_BEFORE_INPUT_SUPPORT &&\n                      !readOnly &&\n                      !isEventHandled(event, attributes.onBeforeInput) &&\n                      ReactEditor.hasSelectableTarget(editor, event.target)\n                    ) {\n                      event.preventDefault()\n                      if (!ReactEditor.isComposing(editor)) {\n                        const text = (event as any).data as string\n                        Editor.insertText(editor, text)\n                      }\n                    }\n                  },\n                  [attributes.onBeforeInput, editor, readOnly]\n                )}\n                onInput={useCallback(\n                  (event: React.FormEvent<HTMLDivElement>) => {\n                    if (isEventHandled(event, attributes.onInput)) {\n                      return\n                    }\n\n                    if (androidInputManagerRef.current) {\n                      androidInputManagerRef.current.handleInput()\n                      return\n                    }\n\n                    // Flush native operations, as native events will have propogated\n                    // and we can correctly compare DOM text values in components\n                    // to stop rendering, so that browser functions like autocorrect\n                    // and spellcheck work as expected.\n                    for (const op of deferredOperations.current) {\n                      op()\n                    }\n                    deferredOperations.current = []\n\n                    // COMPAT: Since `beforeinput` doesn't fully `preventDefault`,\n                    // there's a chance that content might be placed in the browser's undo stack.\n                    // This means undo can be triggered even when the div is not focused,\n                    // and it only triggers the input event for the node. (2024/10/09)\n                    if (!ReactEditor.isFocused(editor)) {\n                      const native = event.nativeEvent as InputEvent\n                      const maybeHistoryEditor: any = editor\n                      if (\n                        native.inputType === 'historyUndo' &&\n                        typeof maybeHistoryEditor.undo === 'function'\n                      ) {\n                        maybeHistoryEditor.undo()\n                        return\n                      }\n                      if (\n                        native.inputType === 'historyRedo' &&\n                        typeof maybeHistoryEditor.redo === 'function'\n                      ) {\n                        maybeHistoryEditor.redo()\n                        return\n                      }\n                    }\n                  },\n                  [attributes.onInput, editor]\n                )}\n                onBlur={useCallback(\n                  (event: React.FocusEvent<HTMLDivElement>) => {\n                    if (\n                      readOnly ||\n                      state.isUpdatingSelection ||\n                      !ReactEditor.hasSelectableTarget(editor, event.target) ||\n                      isEventHandled(event, attributes.onBlur)\n                    ) {\n                      return\n                    }\n\n                    // COMPAT: If the current `activeElement` is still the previous\n                    // one, this is due to the window being blurred when the tab\n                    // itself becomes unfocused, so we want to abort early to allow to\n                    // editor to stay focused when the tab becomes focused again.\n                    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                    if (state.latestElement === root.activeElement) {\n                      return\n                    }\n\n                    const { relatedTarget } = event\n                    const el = ReactEditor.toDOMNode(editor, editor)\n\n                    // COMPAT: The event should be ignored if the focus is returning\n                    // to the editor from an embedded editable element (eg. an <input>\n                    // element inside a void node).\n                    if (relatedTarget === el) {\n                      return\n                    }\n\n                    // COMPAT: The event should be ignored if the focus is moving from\n                    // the editor to inside a void node's spacer element.\n                    if (\n                      isDOMElement(relatedTarget) &&\n                      relatedTarget.hasAttribute('data-slate-spacer')\n                    ) {\n                      return\n                    }\n\n                    // COMPAT: The event should be ignored if the focus is moving to a\n                    // non- editable section of an element that isn't a void node (eg.\n                    // a list item of the check list example).\n                    if (\n                      relatedTarget != null &&\n                      isDOMNode(relatedTarget) &&\n                      ReactEditor.hasDOMNode(editor, relatedTarget)\n                    ) {\n                      const node = ReactEditor.toSlateNode(\n                        editor,\n                        relatedTarget\n                      )\n\n                      if (Element.isElement(node) && !editor.isVoid(node)) {\n                        return\n                      }\n                    }\n\n                    // COMPAT: Safari doesn't always remove the selection even if the content-\n                    // editable element no longer has focus. Refer to:\n                    // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n                    if (IS_WEBKIT) {\n                      const domSelection = getSelection(root)\n                      domSelection?.removeAllRanges()\n                    }\n\n                    IS_FOCUSED.delete(editor)\n                  },\n                  [\n                    readOnly,\n                    state.isUpdatingSelection,\n                    state.latestElement,\n                    editor,\n                    attributes.onBlur,\n                  ]\n                )}\n                onClick={useCallback(\n                  (event: React.MouseEvent<HTMLDivElement>) => {\n                    if (\n                      ReactEditor.hasTarget(editor, event.target) &&\n                      !isEventHandled(event, attributes.onClick) &&\n                      isDOMNode(event.target)\n                    ) {\n                      const node = ReactEditor.toSlateNode(editor, event.target)\n                      const path = ReactEditor.findPath(editor, node)\n\n                      // At this time, the Slate document may be arbitrarily different,\n                      // because onClick handlers can change the document before we get here.\n                      // Therefore we must check that this path actually exists,\n                      // and that it still refers to the same node.\n                      if (\n                        !Editor.hasPath(editor, path) ||\n                        Node.get(editor, path) !== node\n                      ) {\n                        return\n                      }\n\n                      if (event.detail === TRIPLE_CLICK && path.length >= 1) {\n                        let blockPath = path\n                        if (\n                          !(\n                            Element.isElement(node) &&\n                            Editor.isBlock(editor, node)\n                          )\n                        ) {\n                          const block = Editor.above(editor, {\n                            match: n =>\n                              Element.isElement(n) && Editor.isBlock(editor, n),\n                            at: path,\n                          })\n\n                          blockPath = block?.[1] ?? path.slice(0, 1)\n                        }\n\n                        const range = Editor.range(editor, blockPath)\n                        Transforms.select(editor, range)\n                        return\n                      }\n\n                      if (readOnly) {\n                        return\n                      }\n\n                      const start = Editor.start(editor, path)\n                      const end = Editor.end(editor, path)\n                      const startVoid = Editor.void(editor, { at: start })\n                      const endVoid = Editor.void(editor, { at: end })\n\n                      if (\n                        startVoid &&\n                        endVoid &&\n                        Path.equals(startVoid[1], endVoid[1])\n                      ) {\n                        const range = Editor.range(editor, start)\n                        Transforms.select(editor, range)\n                      }\n                    }\n                  },\n                  [editor, attributes.onClick, readOnly]\n                )}\n                onCompositionEnd={useCallback(\n                  (event: React.CompositionEvent<HTMLDivElement>) => {\n                    if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n                      if (ReactEditor.isComposing(editor)) {\n                        Promise.resolve().then(() => {\n                          setIsComposing(false)\n                          IS_COMPOSING.set(editor, false)\n                        })\n                      }\n\n                      androidInputManagerRef.current?.handleCompositionEnd(\n                        event\n                      )\n\n                      if (\n                        isEventHandled(event, attributes.onCompositionEnd) ||\n                        IS_ANDROID\n                      ) {\n                        return\n                      }\n\n                      // COMPAT: In Chrome, `beforeinput` events for compositions\n                      // aren't correct and never fire the \"insertFromComposition\"\n                      // type that we need. So instead, insert whenever a composition\n                      // ends since it will already have been committed to the DOM.\n                      if (\n                        !IS_WEBKIT &&\n                        !IS_FIREFOX_LEGACY &&\n                        !IS_IOS &&\n                        !IS_WECHATBROWSER &&\n                        !IS_UC_MOBILE &&\n                        event.data\n                      ) {\n                        const placeholderMarks =\n                          EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)\n                        EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor)\n\n                        // Ensure we insert text with the marks the user was actually seeing\n                        if (placeholderMarks !== undefined) {\n                          EDITOR_TO_USER_MARKS.set(editor, editor.marks)\n                          editor.marks = placeholderMarks\n                        }\n\n                        Editor.insertText(editor, event.data)\n\n                        const userMarks = EDITOR_TO_USER_MARKS.get(editor)\n                        EDITOR_TO_USER_MARKS.delete(editor)\n                        if (userMarks !== undefined) {\n                          editor.marks = userMarks\n                        }\n                      }\n                    }\n                  },\n                  [attributes.onCompositionEnd, editor]\n                )}\n                onCompositionUpdate={useCallback(\n                  (event: React.CompositionEvent<HTMLDivElement>) => {\n                    if (\n                      ReactEditor.hasSelectableTarget(editor, event.target) &&\n                      !isEventHandled(event, attributes.onCompositionUpdate)\n                    ) {\n                      if (!ReactEditor.isComposing(editor)) {\n                        setIsComposing(true)\n                        IS_COMPOSING.set(editor, true)\n                      }\n                    }\n                  },\n                  [attributes.onCompositionUpdate, editor]\n                )}\n                onCompositionStart={useCallback(\n                  (event: React.CompositionEvent<HTMLDivElement>) => {\n                    if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n                      androidInputManagerRef.current?.handleCompositionStart(\n                        event\n                      )\n\n                      if (\n                        isEventHandled(event, attributes.onCompositionStart) ||\n                        IS_ANDROID\n                      ) {\n                        return\n                      }\n\n                      setIsComposing(true)\n\n                      const { selection } = editor\n                      if (selection && Range.isExpanded(selection)) {\n                        Editor.deleteFragment(editor)\n                        return\n                      }\n                    }\n                  },\n                  [attributes.onCompositionStart, editor]\n                )}\n                onCopy={useCallback(\n                  (event: React.ClipboardEvent<HTMLDivElement>) => {\n                    if (\n                      ReactEditor.hasSelectableTarget(editor, event.target) &&\n                      !isEventHandled(event, attributes.onCopy) &&\n                      !isDOMEventTargetInput(event)\n                    ) {\n                      event.preventDefault()\n                      ReactEditor.setFragmentData(\n                        editor,\n                        event.clipboardData,\n                        'copy'\n                      )\n                    }\n                  },\n                  [attributes.onCopy, editor]\n                )}\n                onCut={useCallback(\n                  (event: React.ClipboardEvent<HTMLDivElement>) => {\n                    if (\n                      !readOnly &&\n                      ReactEditor.hasSelectableTarget(editor, event.target) &&\n                      !isEventHandled(event, attributes.onCut) &&\n                      !isDOMEventTargetInput(event)\n                    ) {\n                      event.preventDefault()\n                      ReactEditor.setFragmentData(\n                        editor,\n                        event.clipboardData,\n                        'cut'\n                      )\n                      const { selection } = editor\n\n                      if (selection) {\n                        if (Range.isExpanded(selection)) {\n                          Editor.deleteFragment(editor)\n                        } else {\n                          const node = Node.parent(\n                            editor,\n                            selection.anchor.path\n                          )\n                          if (Editor.isVoid(editor, node)) {\n                            Transforms.delete(editor)\n                          }\n                        }\n                      }\n                    }\n                  },\n                  [readOnly, editor, attributes.onCut]\n                )}\n                onDragOver={useCallback(\n                  (event: React.DragEvent<HTMLDivElement>) => {\n                    if (\n                      ReactEditor.hasTarget(editor, event.target) &&\n                      !isEventHandled(event, attributes.onDragOver)\n                    ) {\n                      // Only when the target is void, call `preventDefault` to signal\n                      // that drops are allowed. Editable content is droppable by\n                      // default, and calling `preventDefault` hides the cursor.\n                      const node = ReactEditor.toSlateNode(editor, event.target)\n\n                      if (\n                        Element.isElement(node) &&\n                        Editor.isVoid(editor, node)\n                      ) {\n                        event.preventDefault()\n                      }\n                    }\n                  },\n                  [attributes.onDragOver, editor]\n                )}\n                onDragStart={useCallback(\n                  (event: React.DragEvent<HTMLDivElement>) => {\n                    if (\n                      !readOnly &&\n                      ReactEditor.hasTarget(editor, event.target) &&\n                      !isEventHandled(event, attributes.onDragStart)\n                    ) {\n                      const node = ReactEditor.toSlateNode(editor, event.target)\n                      const path = ReactEditor.findPath(editor, node)\n                      const voidMatch =\n                        (Element.isElement(node) &&\n                          Editor.isVoid(editor, node)) ||\n                        Editor.void(editor, { at: path, voids: true })\n\n                      // If starting a drag on a void node, make sure it is selected\n                      // so that it shows up in the selection's fragment.\n                      if (voidMatch) {\n                        const range = Editor.range(editor, path)\n                        Transforms.select(editor, range)\n                      }\n\n                      state.isDraggingInternally = true\n\n                      ReactEditor.setFragmentData(\n                        editor,\n                        event.dataTransfer,\n                        'drag'\n                      )\n                    }\n                  },\n                  [readOnly, editor, attributes.onDragStart, state]\n                )}\n                onDrop={useCallback(\n                  (event: React.DragEvent<HTMLDivElement>) => {\n                    if (\n                      !readOnly &&\n                      ReactEditor.hasTarget(editor, event.target) &&\n                      !isEventHandled(event, attributes.onDrop)\n                    ) {\n                      event.preventDefault()\n\n                      // Keep a reference to the dragged range before updating selection\n                      const draggedRange = editor.selection\n\n                      // Find the range where the drop happened\n                      const range = ReactEditor.findEventRange(editor, event)\n                      const data = event.dataTransfer\n\n                      Transforms.select(editor, range)\n\n                      if (state.isDraggingInternally) {\n                        if (\n                          draggedRange &&\n                          !Range.equals(draggedRange, range) &&\n                          !Editor.void(editor, { at: range, voids: true })\n                        ) {\n                          Transforms.delete(editor, {\n                            at: draggedRange,\n                          })\n                        }\n                      }\n\n                      ReactEditor.insertData(editor, data)\n\n                      // When dragging from another source into the editor, it's possible\n                      // that the current editor does not have focus.\n                      if (!ReactEditor.isFocused(editor)) {\n                        ReactEditor.focus(editor)\n                      }\n                    }\n                  },\n                  [readOnly, editor, attributes.onDrop, state]\n                )}\n                onDragEnd={useCallback(\n                  (event: React.DragEvent<HTMLDivElement>) => {\n                    if (\n                      !readOnly &&\n                      state.isDraggingInternally &&\n                      attributes.onDragEnd &&\n                      ReactEditor.hasTarget(editor, event.target)\n                    ) {\n                      attributes.onDragEnd(event)\n                    }\n                  },\n                  [readOnly, state, attributes, editor]\n                )}\n                onFocus={useCallback(\n                  (event: React.FocusEvent<HTMLDivElement>) => {\n                    if (\n                      !readOnly &&\n                      !state.isUpdatingSelection &&\n                      ReactEditor.hasEditableTarget(editor, event.target) &&\n                      !isEventHandled(event, attributes.onFocus)\n                    ) {\n                      const el = ReactEditor.toDOMNode(editor, editor)\n                      const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                      state.latestElement = root.activeElement\n\n                      // COMPAT: If the editor has nested editable elements, the focus\n                      // can go to them. In Firefox, this must be prevented because it\n                      // results in issues with keyboard navigation. (2017/03/30)\n                      if (IS_FIREFOX && event.target !== el) {\n                        el.focus()\n                        return\n                      }\n\n                      IS_FOCUSED.set(editor, true)\n                    }\n                  },\n                  [readOnly, state, editor, attributes.onFocus]\n                )}\n                onKeyDown={useCallback(\n                  (event: React.KeyboardEvent<HTMLDivElement>) => {\n                    if (\n                      !readOnly &&\n                      ReactEditor.hasEditableTarget(editor, event.target)\n                    ) {\n                      androidInputManagerRef.current?.handleKeyDown(event)\n\n                      const { nativeEvent } = event\n\n                      // COMPAT: The composition end event isn't fired reliably in all browsers,\n                      // so we sometimes might end up stuck in a composition state even though we\n                      // aren't composing any more.\n                      if (\n                        ReactEditor.isComposing(editor) &&\n                        nativeEvent.isComposing === false\n                      ) {\n                        IS_COMPOSING.set(editor, false)\n                        setIsComposing(false)\n                      }\n\n                      if (\n                        isEventHandled(event, attributes.onKeyDown) ||\n                        ReactEditor.isComposing(editor)\n                      ) {\n                        return\n                      }\n\n                      const { selection } = editor\n                      const element =\n                        editor.children[\n                          selection !== null ? selection.focus.path[0] : 0\n                        ]\n                      const isRTL = getDirection(Node.string(element)) === 'rtl'\n\n                      // COMPAT: Since we prevent the default behavior on\n                      // `beforeinput` events, the browser doesn't think there's ever\n                      // any history stack to undo or redo, so we have to manage these\n                      // hotkeys ourselves. (2019/11/06)\n                      if (Hotkeys.isRedo(nativeEvent)) {\n                        event.preventDefault()\n                        const maybeHistoryEditor: any = editor\n\n                        if (typeof maybeHistoryEditor.redo === 'function') {\n                          maybeHistoryEditor.redo()\n                        }\n\n                        return\n                      }\n\n                      if (Hotkeys.isUndo(nativeEvent)) {\n                        event.preventDefault()\n                        const maybeHistoryEditor: any = editor\n\n                        if (typeof maybeHistoryEditor.undo === 'function') {\n                          maybeHistoryEditor.undo()\n                        }\n\n                        return\n                      }\n\n                      // COMPAT: Certain browsers don't handle the selection updates\n                      // properly. In Chrome, the selection isn't properly extended.\n                      // And in Firefox, the selection isn't properly collapsed.\n                      // (2017/10/17)\n                      if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n                        event.preventDefault()\n                        Transforms.move(editor, { unit: 'line', reverse: true })\n                        return\n                      }\n\n                      if (Hotkeys.isMoveLineForward(nativeEvent)) {\n                        event.preventDefault()\n                        Transforms.move(editor, { unit: 'line' })\n                        return\n                      }\n\n                      if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n                        event.preventDefault()\n                        Transforms.move(editor, {\n                          unit: 'line',\n                          edge: 'focus',\n                          reverse: true,\n                        })\n                        return\n                      }\n\n                      if (Hotkeys.isExtendLineForward(nativeEvent)) {\n                        event.preventDefault()\n                        Transforms.move(editor, { unit: 'line', edge: 'focus' })\n                        return\n                      }\n\n                      // COMPAT: If a void node is selected, or a zero-width text node\n                      // adjacent to an inline is selected, we need to handle these\n                      // hotkeys manually because browsers won't be able to skip over\n                      // the void node with the zero-width space not being an empty\n                      // string.\n                      if (Hotkeys.isMoveBackward(nativeEvent)) {\n                        event.preventDefault()\n\n                        if (selection && Range.isCollapsed(selection)) {\n                          Transforms.move(editor, { reverse: !isRTL })\n                        } else {\n                          Transforms.collapse(editor, {\n                            edge: isRTL ? 'end' : 'start',\n                          })\n                        }\n\n                        return\n                      }\n\n                      if (Hotkeys.isMoveForward(nativeEvent)) {\n                        event.preventDefault()\n\n                        if (selection && Range.isCollapsed(selection)) {\n                          Transforms.move(editor, { reverse: isRTL })\n                        } else {\n                          Transforms.collapse(editor, {\n                            edge: isRTL ? 'start' : 'end',\n                          })\n                        }\n\n                        return\n                      }\n\n                      if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n                        event.preventDefault()\n\n                        if (selection && Range.isExpanded(selection)) {\n                          Transforms.collapse(editor, { edge: 'focus' })\n                        }\n\n                        Transforms.move(editor, {\n                          unit: 'word',\n                          reverse: !isRTL,\n                        })\n                        return\n                      }\n\n                      if (Hotkeys.isMoveWordForward(nativeEvent)) {\n                        event.preventDefault()\n\n                        if (selection && Range.isExpanded(selection)) {\n                          Transforms.collapse(editor, { edge: 'focus' })\n                        }\n\n                        Transforms.move(editor, {\n                          unit: 'word',\n                          reverse: isRTL,\n                        })\n                        return\n                      }\n\n                      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                      // fall back to guessing at the input intention for hotkeys.\n                      // COMPAT: In iOS, some of these hotkeys are handled in the\n                      if (!HAS_BEFORE_INPUT_SUPPORT) {\n                        // We don't have a core behavior for these, but they change the\n                        // DOM if we don't prevent them, so we have to.\n                        if (\n                          Hotkeys.isBold(nativeEvent) ||\n                          Hotkeys.isItalic(nativeEvent) ||\n                          Hotkeys.isTransposeCharacter(nativeEvent)\n                        ) {\n                          event.preventDefault()\n                          return\n                        }\n\n                        if (Hotkeys.isSoftBreak(nativeEvent)) {\n                          event.preventDefault()\n                          Editor.insertSoftBreak(editor)\n                          return\n                        }\n\n                        if (Hotkeys.isSplitBlock(nativeEvent)) {\n                          event.preventDefault()\n                          Editor.insertBreak(editor)\n                          return\n                        }\n\n                        if (Hotkeys.isDeleteBackward(nativeEvent)) {\n                          event.preventDefault()\n\n                          if (selection && Range.isExpanded(selection)) {\n                            Editor.deleteFragment(editor, {\n                              direction: 'backward',\n                            })\n                          } else {\n                            Editor.deleteBackward(editor)\n                          }\n\n                          return\n                        }\n\n                        if (Hotkeys.isDeleteForward(nativeEvent)) {\n                          event.preventDefault()\n\n                          if (selection && Range.isExpanded(selection)) {\n                            Editor.deleteFragment(editor, {\n                              direction: 'forward',\n                            })\n                          } else {\n                            Editor.deleteForward(editor)\n                          }\n\n                          return\n                        }\n\n                        if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                          event.preventDefault()\n\n                          if (selection && Range.isExpanded(selection)) {\n                            Editor.deleteFragment(editor, {\n                              direction: 'backward',\n                            })\n                          } else {\n                            Editor.deleteBackward(editor, { unit: 'line' })\n                          }\n\n                          return\n                        }\n\n                        if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n                          event.preventDefault()\n\n                          if (selection && Range.isExpanded(selection)) {\n                            Editor.deleteFragment(editor, {\n                              direction: 'forward',\n                            })\n                          } else {\n                            Editor.deleteForward(editor, { unit: 'line' })\n                          }\n\n                          return\n                        }\n\n                        if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                          event.preventDefault()\n\n                          if (selection && Range.isExpanded(selection)) {\n                            Editor.deleteFragment(editor, {\n                              direction: 'backward',\n                            })\n                          } else {\n                            Editor.deleteBackward(editor, { unit: 'word' })\n                          }\n\n                          return\n                        }\n\n                        if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n                          event.preventDefault()\n\n                          if (selection && Range.isExpanded(selection)) {\n                            Editor.deleteFragment(editor, {\n                              direction: 'forward',\n                            })\n                          } else {\n                            Editor.deleteForward(editor, { unit: 'word' })\n                          }\n\n                          return\n                        }\n                      } else {\n                        if (IS_CHROME || IS_WEBKIT) {\n                          // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n                          // an event when deleting backwards in a selected void inline node\n                          if (\n                            selection &&\n                            (Hotkeys.isDeleteBackward(nativeEvent) ||\n                              Hotkeys.isDeleteForward(nativeEvent)) &&\n                            Range.isCollapsed(selection)\n                          ) {\n                            const currentNode = Node.parent(\n                              editor,\n                              selection.anchor.path\n                            )\n\n                            if (\n                              Element.isElement(currentNode) &&\n                              Editor.isVoid(editor, currentNode) &&\n                              (Editor.isInline(editor, currentNode) ||\n                                Editor.isBlock(editor, currentNode))\n                            ) {\n                              event.preventDefault()\n                              Editor.deleteBackward(editor, { unit: 'block' })\n\n                              return\n                            }\n                          }\n                        }\n                      }\n                    }\n                  },\n                  [readOnly, editor, attributes.onKeyDown]\n                )}\n                onPaste={useCallback(\n                  (event: React.ClipboardEvent<HTMLDivElement>) => {\n                    if (\n                      !readOnly &&\n                      ReactEditor.hasEditableTarget(editor, event.target) &&\n                      !isEventHandled(event, attributes.onPaste)\n                    ) {\n                      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                      // fall back to React's `onPaste` here instead.\n                      // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n                      // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n                      // COMPAT: Safari InputEvents generated by pasting won't include\n                      // application/x-slate-fragment items, so use the\n                      // ClipboardEvent here. (2023/03/15)\n                      if (\n                        !HAS_BEFORE_INPUT_SUPPORT ||\n                        isPlainTextOnlyPaste(event.nativeEvent) ||\n                        IS_WEBKIT\n                      ) {\n                        event.preventDefault()\n                        ReactEditor.insertData(editor, event.clipboardData)\n                      }\n                    }\n                  },\n                  [readOnly, editor, attributes.onPaste]\n                )}\n              >\n                <Children\n                  decorations={decorations}\n                  node={editor}\n                  renderElement={renderElement}\n                  renderPlaceholder={renderPlaceholder}\n                  renderLeaf={renderLeaf}\n                  selection={editor.selection}\n                />\n              </Component>\n            </RestoreDOM>\n          </DecorateContext.Provider>\n        </ComposingContext.Provider>\n      </ReadOnlyContext.Provider>\n    )\n  }\n)\n\n/**\n * The props that get passed to renderPlaceholder\n */\nexport type RenderPlaceholderProps = {\n  children: any\n  attributes: {\n    'data-slate-placeholder': boolean\n    dir?: 'rtl'\n    contentEditable: boolean\n    ref: React.RefCallback<any>\n    style: React.CSSProperties\n  }\n}\n\n/**\n * The default placeholder element\n */\n\nexport const DefaultPlaceholder = ({\n  attributes,\n  children,\n}: RenderPlaceholderProps) => (\n  // COMPAT: Artificially add a line-break to the end on the placeholder element\n  // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n  <span {...attributes}>\n    {children}\n    {IS_ANDROID && <br />}\n  </span>\n)\n\n/**\n * A default memoized decorate function.\n */\n\nexport const defaultDecorate: (entry: NodeEntry) => DecoratedRange[] = () => []\n\n/**\n * A default implement to scroll dom range into view.\n */\n\nconst defaultScrollSelectionIntoView = (\n  editor: ReactEditor,\n  domRange: DOMRange\n) => {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (\n    domRange.getBoundingClientRect &&\n    (!editor.selection ||\n      (editor.selection && Range.isCollapsed(editor.selection)))\n  ) {\n    const leafEl = domRange.startContainer.parentElement!\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange)\n    scrollIntoView(leafEl, {\n      scrollMode: 'if-needed',\n    })\n\n    // @ts-expect-error an unorthodox delete D:\n    delete leafEl.getBoundingClientRect\n  }\n}\n\n/**\n * Check if an event is overrided by a handler.\n */\n\nexport const isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>,\n>(\n  event: EventType,\n  handler?: (event: EventType) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.isDefaultPrevented() || event.isPropagationStopped()\n}\n\n/**\n * Check if the event's target is an input element\n */\nexport const isDOMEventTargetInput = <\n  EventType extends React.SyntheticEvent<unknown, unknown>,\n>(\n  event: EventType\n) => {\n  return (\n    isDOMNode(event.target) &&\n    (event.target instanceof HTMLInputElement ||\n      event.target instanceof HTMLTextAreaElement)\n  )\n}\n\n/**\n * Check if a DOM event is overrided by a handler.\n */\n\nexport const isDOMEventHandled = <E extends Event>(\n  event: E,\n  handler?: (event: E) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.defaultPrevented\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\n\nexport const FocusedContext = createContext(false)\n\n/**\n * Get the current `focused` state of the editor.\n */\n\nexport const useFocused = (): boolean => {\n  return useContext(FocusedContext)\n}\n","import {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react'\nimport { Editor } from 'slate'\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect'\n\nfunction isError(error: any): error is Error {\n  return error instanceof Error\n}\n\ntype EditorChangeHandler = (editor: Editor) => void\n/**\n * A React context for sharing the editor selector context in a way to control rerenders\n */\n\nexport const SlateSelectorContext = createContext<{\n  getSlate: () => Editor\n  addEventListener: (callback: EditorChangeHandler) => () => void\n}>({} as any)\n\nconst refEquality = (a: any, b: any) => a === b\n\n/**\n * use redux style selectors to prevent rerendering on every keystroke.\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\n *\n * Example:\n * ```\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\n * ```\n */\nexport function useSlateSelector<T>(\n  selector: (editor: Editor) => T,\n  equalityFn: (a: T, b: T) => boolean = refEquality\n) {\n  const [, forceRender] = useReducer(s => s + 1, 0)\n  const context = useContext(SlateSelectorContext)\n  if (!context) {\n    throw new Error(\n      `The \\`useSlateSelector\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n  const { getSlate, addEventListener } = context\n\n  const latestSubscriptionCallbackError = useRef<Error | undefined>()\n  const latestSelector = useRef<(editor: Editor) => T>(() => null as any)\n  const latestSelectedState = useRef<T>(null as any as T)\n  let selectedState: T\n\n  try {\n    if (\n      selector !== latestSelector.current ||\n      latestSubscriptionCallbackError.current\n    ) {\n      selectedState = selector(getSlate())\n    } else {\n      selectedState = latestSelectedState.current\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`\n    }\n\n    throw err\n  }\n  useIsomorphicLayoutEffect(() => {\n    latestSelector.current = selector\n    latestSelectedState.current = selectedState\n    latestSubscriptionCallbackError.current = undefined\n  })\n\n  useIsomorphicLayoutEffect(\n    () => {\n      function checkForUpdates() {\n        try {\n          const newSelectedState = latestSelector.current(getSlate())\n\n          if (equalityFn(newSelectedState, latestSelectedState.current)) {\n            return\n          }\n\n          latestSelectedState.current = newSelectedState\n        } catch (err) {\n          // we ignore all errors here, since when the component\n          // is re-rendered, the selectors are called again, and\n          // will throw again, if neither props nor store state\n          // changed\n          if (err instanceof Error) {\n            latestSubscriptionCallbackError.current = err\n          } else {\n            latestSubscriptionCallbackError.current = new Error(String(err))\n          }\n        }\n\n        forceRender()\n      }\n\n      const unsubscribe = addEventListener(checkForUpdates)\n\n      checkForUpdates()\n\n      return () => unsubscribe()\n    },\n    // don't rerender on equalityFn change since we want to be able to define it inline\n    [addEventListener, getSlate]\n  )\n\n  return selectedState\n}\n\n/**\n * Create selector context with editor updating on every editor change\n */\nexport function useSelectorContext(editor: Editor) {\n  const eventListeners = useRef<EditorChangeHandler[]>([]).current\n  const slateRef = useRef<{\n    editor: Editor\n  }>({\n    editor,\n  }).current\n  const onChange = useCallback(\n    (editor: Editor) => {\n      slateRef.editor = editor\n      eventListeners.forEach((listener: EditorChangeHandler) =>\n        listener(editor)\n      )\n    },\n    [eventListeners, slateRef]\n  )\n\n  const selectorContext = useMemo(() => {\n    return {\n      getSlate: () => slateRef.editor,\n      addEventListener: (callback: EditorChangeHandler) => {\n        eventListeners.push(callback)\n        return () => {\n          eventListeners.splice(eventListeners.indexOf(callback), 1)\n        }\n      },\n    }\n  }, [eventListeners, slateRef])\n  return { selectorContext, onChange }\n}\n","import React from 'react'\n\nexport const REACT_MAJOR_VERSION = parseInt(React.version.split('.')[0], 10)\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { Descendant, Editor, Node, Operation, Scrubber, Selection } from 'slate'\nimport { EDITOR_TO_ON_CHANGE } from 'slate-dom'\nimport { FocusedContext } from '../hooks/use-focused'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport { SlateContext, SlateContextValue } from '../hooks/use-slate'\nimport {\n  useSelectorContext,\n  SlateSelectorContext,\n} from '../hooks/use-slate-selector'\nimport { EditorContext } from '../hooks/use-slate-static'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { REACT_MAJOR_VERSION } from '../utils/environment'\n\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\n\nexport const Slate = (props: {\n  editor: ReactEditor\n  initialValue: Descendant[]\n  children: React.ReactNode\n  onChange?: (value: Descendant[]) => void\n  onSelectionChange?: (selection: Selection) => void\n  onValueChange?: (value: Descendant[]) => void\n}) => {\n  const {\n    editor,\n    children,\n    onChange,\n    onSelectionChange,\n    onValueChange,\n    initialValue,\n    ...rest\n  } = props\n\n  const [context, setContext] = React.useState<SlateContextValue>(() => {\n    if (!Node.isNodeList(initialValue)) {\n      throw new Error(\n        `[Slate] initialValue is invalid! Expected a list of elements but got: ${Scrubber.stringify(\n          initialValue\n        )}`\n      )\n    }\n    if (!Editor.isEditor(editor)) {\n      throw new Error(\n        `[Slate] editor is invalid! You passed: ${Scrubber.stringify(editor)}`\n      )\n    }\n    editor.children = initialValue\n    Object.assign(editor, rest)\n    return { v: 0, editor }\n  })\n\n  const { selectorContext, onChange: handleSelectorChange } =\n    useSelectorContext(editor)\n\n  const onContextChange = useCallback(\n    (options?: { operation?: Operation }) => {\n      if (onChange) {\n        onChange(editor.children)\n      }\n\n      switch (options?.operation?.type) {\n        case 'set_selection':\n          onSelectionChange?.(editor.selection)\n          break\n        default:\n          onValueChange?.(editor.children)\n      }\n\n      setContext(prevContext => ({\n        v: prevContext.v + 1,\n        editor,\n      }))\n      handleSelectorChange(editor)\n    },\n    [editor, handleSelectorChange, onChange, onSelectionChange, onValueChange]\n  )\n\n  useEffect(() => {\n    EDITOR_TO_ON_CHANGE.set(editor, onContextChange)\n\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {})\n    }\n  }, [editor, onContextChange])\n\n  const [isFocused, setIsFocused] = useState(ReactEditor.isFocused(editor))\n\n  useEffect(() => {\n    setIsFocused(ReactEditor.isFocused(editor))\n  }, [editor])\n\n  useIsomorphicLayoutEffect(() => {\n    const fn = () => setIsFocused(ReactEditor.isFocused(editor))\n    if (REACT_MAJOR_VERSION >= 17) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn)\n      document.addEventListener('focusout', fn)\n      return () => {\n        document.removeEventListener('focusin', fn)\n        document.removeEventListener('focusout', fn)\n      }\n    } else {\n      document.addEventListener('focus', fn, true)\n      document.addEventListener('blur', fn, true)\n      return () => {\n        document.removeEventListener('focus', fn, true)\n        document.removeEventListener('blur', fn, true)\n      }\n    }\n  }, [])\n\n  return (\n    <SlateSelectorContext.Provider value={selectorContext}>\n      <SlateContext.Provider value={context}>\n        <EditorContext.Provider value={context.editor}>\n          <FocusedContext.Provider value={isFocused}>\n            {children}\n          </FocusedContext.Provider>\n        </EditorContext.Provider>\n      </SlateContext.Provider>\n    </SlateSelectorContext.Provider>\n  )\n}\n","import { useContext } from 'react'\n\nimport { EditorContext } from './use-slate-static'\n\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */\n\nexport const useEditor = () => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useEditor\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","import { BaseSelection, Range } from 'slate'\n\nimport { useSlateSelector } from './use-slate-selector'\n\n/**\n * Get the current slate selection.\n * Only triggers a rerender when the selection actually changes\n */\nexport const useSlateSelection = () => {\n  return useSlateSelector(editor => editor.selection, isSelectionEqual)\n}\n\nconst isSelectionEqual = (a: BaseSelection, b: BaseSelection) => {\n  if (!a && !b) return true\n  if (!a || !b) return false\n  return Range.equals(a, b)\n}\n","import ReactDOM from 'react-dom'\nimport { BaseEditor } from 'slate'\nimport { withDOM } from 'slate-dom'\nimport { ReactEditor } from './react-editor'\nimport { REACT_MAJOR_VERSION } from '../utils/environment'\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\nexport const withReact = <T extends BaseEditor>(\n  editor: T,\n  clipboardFormatKey = 'x-slate-fragment'\n): T & ReactEditor => {\n  let e = editor as T & ReactEditor\n\n  e = withDOM(e, clipboardFormatKey)\n\n  const { onChange } = e\n\n  e.onChange = options => {\n    // COMPAT: React < 18 doesn't batch `setState` hook calls, which means\n    // that the children and selection can get out of sync for one render\n    // pass. So we have to use this unstable API to ensure it batches them.\n    // (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    const maybeBatchUpdates =\n      REACT_MAJOR_VERSION < 18\n        ? ReactDOM.unstable_batchedUpdates\n        : (callback: () => void) => callback()\n\n    maybeBatchUpdates(() => {\n      onChange(options)\n    })\n  }\n\n  return e\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}